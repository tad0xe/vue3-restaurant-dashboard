{"ast":null,"code":"import { ref } from 'vue';\nimport { QrcodeStream } from 'vue-qrcode-reader';\nimport axios from 'axios';\nexport default {\n  components: {\n    QrcodeStream\n  },\n  setup() {\n    const result = ref('');\n    const ticket = ref(null);\n    const error = ref('');\n    const notFound = ref(false);\n    const onDetect = async detectedCodes => {\n      const reference = detectedCodes[0]?.rawValue;\n      result.value = reference;\n      ticket.value = null;\n      notFound.value = false;\n      try {\n        const res = await axios.get(`http://localhost:4000/api/order/${reference}`);\n        ticket.value = res.data.order;\n      } catch (err) {\n        if (err.response && err.response.status === 404) {\n          notFound.value = true;\n        } else {\n          error.value = 'Server error. Please try again.';\n        }\n        console.error(err);\n      }\n    };\n    const onError = err => {\n      console.error(err);\n      error.value = 'Camera access or scanning failed.';\n    };\n    return {\n      result,\n      ticket,\n      error,\n      notFound,\n      onDetect,\n      onError\n    };\n  }\n};","map":{"version":3,"names":["ref","QrcodeStream","axios","components","setup","result","ticket","error","notFound","onDetect","detectedCodes","reference","rawValue","value","res","get","data","order","err","response","status","console","onError"],"sources":["C:\\Users\\ajib\\OneDrive\\Desktop\\event-ticket\\event-ticket-frontend\\src\\components\\app\\admin\\scanner.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <h2>üéØ Scan Ticket QR Code</h2>\r\n\r\n    <p class=\"decode-result\">\r\n      Last result: <b>{{ result }}</b>\r\n    </p>\r\n\r\n    <qrcode-stream\r\n      :constraints=\"{ facingMode: 'environment' }\"\r\n      @detect=\"onDetect\"\r\n      @error=\"onError\"\r\n    />\r\n\r\n    <p v-if=\"error\" class=\"error\">{{ error }}</p>\r\n\r\n    <!-- Show ticket info if found -->\r\n    <div v-if=\"ticket\">\r\n      <h4>üéüÔ∏è Ticket Details</h4>\r\n      <p><strong>Event:</strong> {{ ticket.title }}</p>\r\n      <p><strong>Reference:</strong> {{ ticket.reference }}</p>\r\n      <p><strong>Email:</strong> {{ ticket.contact?.email || 'N/A' }}</p>\r\n      <p><strong>Phone:</strong> {{ ticket.contact?.phone || 'N/A' }}</p>\r\n      <p><strong>Tickets:</strong></p>\r\n      <ul>\r\n        <li v-for=\"ticket in ticket.tickets\" :key=\"ticket._id\">\r\n          {{ ticket.name }} x {{ ticket.quantity }}\r\n        </li>\r\n      </ul>\r\n    </div>\r\n\r\n    <!-- If no ticket found -->\r\n    <div v-if=\"notFound\">\r\n      <p class=\"text-danger\">‚ùå Ticket not found.</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref } from 'vue'\r\nimport { QrcodeStream } from 'vue-qrcode-reader'\r\nimport axios from 'axios'\r\n\r\nexport default {\r\n  components: {\r\n    QrcodeStream\r\n  },\r\n  setup() {\r\n    const result = ref('')\r\n    const ticket = ref(null)\r\n    const error = ref('')\r\n    const notFound = ref(false)\r\n\r\n    const onDetect = async (detectedCodes) => {\r\n      const reference = detectedCodes[0]?.rawValue\r\n      result.value = reference\r\n      ticket.value = null\r\n      notFound.value = false\r\n\r\n      try {\r\n        const res = await axios.get(`http://localhost:4000/api/order/${reference}`)\r\n        ticket.value = res.data.order\r\n      } catch (err) {\r\n        if (err.response && err.response.status === 404) {\r\n          notFound.value = true\r\n        } else {\r\n          error.value = 'Server error. Please try again.'\r\n        }\r\n        console.error(err)\r\n      }\r\n    }\r\n\r\n    const onError = (err) => {\r\n      console.error(err)\r\n      error.value = 'Camera access or scanning failed.'\r\n    }\r\n\r\n    return {\r\n      result,\r\n      ticket,\r\n      error,\r\n      notFound,\r\n      onDetect,\r\n      onError\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.container {\r\n  max-width: 600px;\r\n  margin: 2rem auto;\r\n  text-align: center;\r\n}\r\n.decode-result {\r\n  margin-top: 1rem;\r\n  font-size: 1.2rem;\r\n}\r\n.error {\r\n  color: red;\r\n}\r\n</style>\r\n"],"mappings":"AAuCA,SAASA,GAAE,QAAS,KAAI;AACxB,SAASC,YAAW,QAAS,mBAAkB;AAC/C,OAAOC,KAAI,MAAO,OAAM;AAExB,eAAe;EACbC,UAAU,EAAE;IACVF;EACF,CAAC;EACDG,KAAKA,CAAA,EAAG;IACN,MAAMC,MAAK,GAAIL,GAAG,CAAC,EAAE;IACrB,MAAMM,MAAK,GAAIN,GAAG,CAAC,IAAI;IACvB,MAAMO,KAAI,GAAIP,GAAG,CAAC,EAAE;IACpB,MAAMQ,QAAO,GAAIR,GAAG,CAAC,KAAK;IAE1B,MAAMS,QAAO,GAAI,MAAOC,aAAa,IAAK;MACxC,MAAMC,SAAQ,GAAID,aAAa,CAAC,CAAC,CAAC,EAAEE,QAAO;MAC3CP,MAAM,CAACQ,KAAI,GAAIF,SAAQ;MACvBL,MAAM,CAACO,KAAI,GAAI,IAAG;MAClBL,QAAQ,CAACK,KAAI,GAAI,KAAI;MAErB,IAAI;QACF,MAAMC,GAAE,GAAI,MAAMZ,KAAK,CAACa,GAAG,CAAE,mCAAkCJ,SAAU,EAAC;QAC1EL,MAAM,CAACO,KAAI,GAAIC,GAAG,CAACE,IAAI,CAACC,KAAI;MAC9B,EAAE,OAAOC,GAAG,EAAE;QACZ,IAAIA,GAAG,CAACC,QAAO,IAAKD,GAAG,CAACC,QAAQ,CAACC,MAAK,KAAM,GAAG,EAAE;UAC/CZ,QAAQ,CAACK,KAAI,GAAI,IAAG;QACtB,OAAO;UACLN,KAAK,CAACM,KAAI,GAAI,iCAAgC;QAChD;QACAQ,OAAO,CAACd,KAAK,CAACW,GAAG;MACnB;IACF;IAEA,MAAMI,OAAM,GAAKJ,GAAG,IAAK;MACvBG,OAAO,CAACd,KAAK,CAACW,GAAG;MACjBX,KAAK,CAACM,KAAI,GAAI,mCAAkC;IAClD;IAEA,OAAO;MACLR,MAAM;MACNC,MAAM;MACNC,KAAK;MACLC,QAAQ;MACRC,QAAQ;MACRa;IACF;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}