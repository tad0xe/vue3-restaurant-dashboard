{"ast":null,"code":"import { toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, _toDisplayString($data.products.length) + \" products found \", 1 /* TEXT */);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_toDisplayString","$data","products","length"],"sources":["C:\\Users\\ajib\\OneDrive\\Desktop\\event-ticket\\event-ticket-frontend\\src\\components\\rex.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n  {{ products.length }} products found\r\n   \r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapActions } from \"vuex\";\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      // Price range data\r\n      minPrice: 0,\r\n      maxPrice: 1000,\r\n      selectedMinPrice: 0,\r\n      selectedMaxPrice: 1000,\r\n      isModalOpen: false,\r\n      products: [],\r\n      searchQuery: \"\",\r\n      selectedBrands: [], // Selected brands filter\r\n      selectedMaterials: [], // Selected materials filter\r\n      selectedSize: 50, // Default max size for slider\r\n      minSize: 0, // Minimum size\r\n      maxSize: 100, // Maximum size\r\n    };\r\n  },\r\n\r\n  computed: {\r\n    // Get unique brands (case-insensitive & remove extra spaces)\r\n  \r\n\r\n    // Get min & max size from products\r\n    productSizes() {\r\n      const sizes = this.products.map((product) => product.size);\r\n      return { min: Math.min(...sizes), max: Math.max(...sizes) };\r\n    },\r\n\r\n    // Filtered Products\r\n    filteredProducts() {\r\n      return this.products.filter((product) => {\r\n        const matchesSearch = product.title\r\n          .toLowerCase()\r\n          .includes(this.searchQuery.toLowerCase());\r\n        const matchesBrand =\r\n          this.selectedBrands.length === 0 ||\r\n          this.selectedBrands.includes(product.brand.toLowerCase().trim());\r\n        const matchesMaterial =\r\n          this.selectedMaterials.length === 0 ||\r\n          this.selectedMaterials.includes(\r\n            product.material.toLowerCase().trim()\r\n          );\r\n        const matchesSize = product.size <= this.selectedSize;\r\n        const matchesPrice =\r\n          product.price >= this.selectedMinPrice &&\r\n          product.price <= this.selectedMaxPrice;\r\n\r\n        return (\r\n          matchesSearch &&\r\n          matchesBrand &&\r\n          matchesMaterial &&\r\n          matchesSize &&\r\n          matchesPrice\r\n        );\r\n      });\r\n    },\r\n  },\r\n\r\n  async created() {\r\n    const tags = [\r\n      \"Sale\",\r\n      \"Deal\",\r\n      \"Limited Edition\",\r\n      \"100% orgasm\",\r\n      \"As Seen on TV\",\r\n      \"Best Seller\",\r\n      \"Top Rated\",\r\n    ];\r\n\r\n    const slug = this.$route.params.categoryType;\r\n\r\n    // Convert slug to readable category name\r\n    const categoryType = slug.replace(/-/g, \" \");\r\n\r\n    // Optional: Capitalize if needed (depends on backend)\r\n    const finalCategory = categoryType.replace(/\\b\\w/g, (l) => l.toUpperCase());\r\n\r\n    const response = await axios.get(\r\n      `http://localhost:4000/api/categories/${encodeURIComponent(\r\n        finalCategory\r\n      )}`\r\n    );\r\n    console.log(\"Category Products Response:\", response.data);\r\n    // Shuffle the products (optional)\r\n    const shuffledProducts = this.shuffleArray(response.data.products || []);\r\n\r\n    // Add random tags\r\n    this.products = shuffledProducts.map((product) => ({\r\n      ...product,\r\n      randomTag:\r\n        Math.random() < 0.5\r\n          ? tags[Math.floor(Math.random() * tags.length)]\r\n          : null,\r\n    }));\r\n\r\n    // Store categories as well\r\n    this.categories = response.data.categories;\r\n\r\n    // Set slider range based on products\r\n    if (this.products.length) {\r\n      this.minSize = this.productSizes.min;\r\n      this.maxSize = this.productSizes.max;\r\n      this.selectedSize = this.maxSize;\r\n\r\n      // Set price range based on products\r\n      const prices = this.products.map((product) => product.price);\r\n      this.minPrice = Math.min(...prices);\r\n      this.maxPrice = Math.max(...prices);\r\n      this.selectedMinPrice = this.minPrice;\r\n      this.selectedMaxPrice = this.maxPrice;\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    openModal() {\r\n      this.isModalOpen = true;\r\n      document.body.style.overflow = \"hidden\"; // Disable body scrolling when modal is open\r\n    },\r\n    // Close the modal\r\n    closeModal() {\r\n      this.isModalOpen = false;\r\n      document.body.style.overflow = \"\"; // Re-enable body scrolling\r\n    },\r\n    ...mapActions([\"addProductToCart\"]),\r\n    async addProductToCart(product) {\r\n      try {\r\n        await this.$store.dispatch(\"addProductToCart\", product); // call Vuex action manually\r\n        this.$toast.open({\r\n          message: \"✅ Product added to cart!\",\r\n          type: \"success\",\r\n          duration: 3000,\r\n          dismissible: true,\r\n          position: \"top\",\r\n        });\r\n      } catch (error) {\r\n        this.$toast.open({\r\n          message: \"✅ Product added to cart!\",\r\n          type: \"success\",\r\n          duration: 3000,\r\n          dismissible: true,\r\n          position: \"top\",\r\n        });\r\n      }\r\n    },\r\n    shuffleArray(array) {\r\n      return array\r\n        .map((item) => ({ item, sort: Math.random() }))\r\n        .sort((a, b) => a.sort - b.sort)\r\n        .map(({ item }) => item);\r\n    },\r\n\r\n    goToProduct(productTitle) {\r\n      // Normalize the product title for the URL: Replace spaces with hyphens\r\n      let normalizedProductTitle = productTitle.replace(/\\s+/g, \"-\");\r\n\r\n      console.log(\"Normalized Product Title for URL:\", normalizedProductTitle);\r\n\r\n      // Store the raw title in Vuex (for the backend)\r\n      this.$store.dispatch(\"setProductUrl\", productTitle);\r\n\r\n      // Use the normalized title in the URL (for better SEO)\r\n      this.$router.push({\r\n        name: \"ProductDetails\",\r\n        params: { title: normalizedProductTitle }, // For URL with hyphens\r\n      });\r\n    },\r\n  },\r\n};\r\n</script>"],"mappings":";;EACOA,KAAK,EAAC;AAAW;;uBAAtBC,mBAAA,CAGM,OAHNC,UAGM,EAAAC,gBAAA,CAFHC,KAAA,CAAAC,QAAQ,CAACC,MAAM,IAAG,kBAErB"},"metadata":{},"sourceType":"module","externalDependencies":[]}