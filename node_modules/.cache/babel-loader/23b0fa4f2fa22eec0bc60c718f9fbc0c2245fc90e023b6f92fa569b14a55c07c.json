{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"form-container\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"\"\n}, [/*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"\"\n}, [/*#__PURE__*/_createElementVNode(\"img\", {\n  class: \"border-0 img-fluid\",\n  src: \"https://images.unsplash.com/photo-1521737604893-d14cc237f11d\",\n  alt: \"Product Image\"\n})])], -1 /* HOISTED */);\nconst _hoisted_3 = [_hoisted_2];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, _hoisted_3);\n}","map":{"version":3,"names":["class","_createElementVNode","id","src","alt","_hoisted_2","_createElementBlock","_hoisted_1","_hoisted_3"],"sources":["C:\\Users\\ajib\\OneDrive\\Desktop\\event-ticket\\vue3-restaurant-dashboard\\src\\components\\Product.vue"],"sourcesContent":["<template>\r\n  <div class=\"form-container\">\r\n  <div class=\"\">\r\n    <div id=\"\">\r\n    <img\r\n                class=\"border-0  img-fluid\"\r\n                src=\"https://images.unsplash.com/photo-1521737604893-d14cc237f11d\"\r\n                alt=\"Product Image\"\r\n              />\r\n    </div>\r\n  </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\nimport { mapActions } from \"vuex\";\r\n\r\nexport default {\r\n  props: {\r\n    product: {\r\n      type: Object,\r\n      required: true,\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      products: [],\r\n      product: {\r\n        photos: [],\r\n        price: 0, // Default price\r\n      },\r\n      selectedTab: 0,\r\n      quantity: 1, // Default quantity,\r\n    };\r\n  },\r\n\r\n  async created() {\r\n    try {\r\n      // Retrieve the raw product title from Vuex\r\n      let productTitle = this.$store.getters.getProductUrl;\r\n      console.log(\"Raw Product Title from Vuex:\", productTitle);\r\n\r\n      // Send the raw title to the backend (encode for HTTP request)\r\n      const response = await axios.get(\r\n        `http://localhost:5000/api/products/${encodeURIComponent(productTitle)}`\r\n      );\r\n\r\n      this.product = response.data.product || {};\r\n    } catch (error) {\r\n      console.error(\"Error fetching product details:\", error);\r\n    }\r\n\r\n    try {\r\n      const response = await axios.get(`http://localhost:5000/api/products`);\r\n      console.log(\"API Response:\", response.data);\r\n      const tags = [\r\n        \"Sale\",\r\n        \"Deal\",\r\n        \"Limited Edition\",\r\n        \"100% orgasm\",\r\n        \"As Seen on TV\",\r\n        \"Best Seller\",\r\n        \"Top Rated\",\r\n      ];\r\n      this.products = this.shuffleArray(response.data.products || [])\r\n        .slice(0, 3)\r\n        .map((product) => ({\r\n          ...product,\r\n          randomTag:\r\n            Math.random() < 0.5\r\n              ? tags[Math.floor(Math.random() * tags.length)]\r\n              : null,\r\n          // 50% chance of getting a tag\r\n        }));\r\n    } catch (error) {\r\n      console.error(\"Error fetching products:\", error);\r\n    }\r\n  },\r\n  computed: {\r\n    totalPrice() {\r\n      return this.product.price * this.quantity;\r\n    },\r\n    productTitle() {\r\n      return this.$store.state.productTitle;\r\n    },\r\n  },\r\n  methods: {\r\n    async addProductToCart(product) {\r\n      try {\r\n        await this.$store.dispatch(\"addProductToCart\", product); // call Vuex action manually\r\n        this.$toast.open({\r\n          message: \"✅ Product added to cart!\",\r\n          type: \"success\",\r\n          duration: 3000,\r\n          dismissible: true,\r\n          position: \"top\",\r\n        });\r\n      } catch (error) {\r\n        this.$toast.open({\r\n          message: \"✅ Product added to cart!\",\r\n          type: \"success\",\r\n          duration: 3000,\r\n          dismissible: true,\r\n          position: \"top\",\r\n        });\r\n      }\r\n    },\r\n    slugify(text) {\r\n      return text\r\n        .toLowerCase()\r\n        .trim()\r\n        .replace(/\\s+/g, \"-\") // Replace spaces with hyphens\r\n        .replace(/[^\\w\\s'-]/g, \"\"); // Remove special characters, keep apostrophes\r\n    },\r\n    goToProduct(productTitle) {\r\n      // Normalize the product title for the URL: Replace spaces with hyphens\r\n      let normalizedProductTitle = productTitle.replace(/\\s+/g, \"-\");\r\n\r\n      console.log(\"Normalized Product Title for URL:\", normalizedProductTitle);\r\n\r\n      // Store the raw title in Vuex (for the backend)\r\n      this.$store.dispatch(\"setProductUrl\", productTitle);\r\n\r\n      // Use the normalized title in the URL (for better SEO)\r\n      this.$router.push({\r\n        name: \"ProductDetails\",\r\n        params: { title: normalizedProductTitle }, // For URL with hyphens\r\n      });\r\n      window.location.reload();\r\n    },\r\n\r\n    buyNow(product) {\r\n      this.addProductToCart(product); // Add product to cart\r\n      this.$router.push(\"/cart\"); // Redirect to checkout page\r\n    },\r\n    shuffleArray(array) {\r\n      return array.sort(() => Math.random() - 0.5);\r\n    },\r\n    onChangeQuantity(event, product) {\r\n      let qty = parseInt(event.target.value);\r\n      console.log(\"Selected Quantity:\", qty);\r\n\r\n      if (!isNaN(qty)) {\r\n        this.quantity = qty;\r\n        this.$store.commit(\"changeQty\", { product, qty });\r\n      } else {\r\n        console.error(\"Invalid Quantity Selected\");\r\n      }\r\n    },\r\n  },\r\n  watch: {\r\n    product: {\r\n      handler(newProduct) {\r\n        if (newProduct && newProduct.photos && newProduct.photos.length > 0) {\r\n          this.selectedPhoto = newProduct.photos[0];\r\n        }\r\n      },\r\n      deep: true,\r\n      immediate: true,\r\n    },\r\n  },\r\n};\r\n</script>\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAgB;gCAC3BC,mBAAA,CAQM;EARDD,KAAK,EAAC;AAAE,I,aACXC,mBAAA,CAMM;EANDC,EAAE,EAAC;AAAE,I,aACVD,mBAAA,CAIY;EAHAD,KAAK,EAAC,oBAAqB;EAC3BG,GAAG,EAAC,8DAA8D;EAClEC,GAAG,EAAC;;oBALlBC,UAQM,C;;uBATNC,mBAAA,CAUM,OAVNC,UAUM,EAAAC,UAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}