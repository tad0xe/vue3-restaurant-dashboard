{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\";\nconst state = {\n  cart: [],\n  cartLength: 0,\n  shippingPrice: 0,\n  shippingEstimatedDelivery: \"\",\n  productUrl: \"\",\n  selectedCountry: \"\",\n  // Store country name\n  selectedState: \"\",\n  // Store state name\n  selectedCity: \"\",\n  selectedName: \"\",\n  // Store city name\n  selectedAddress: \"\",\n  // Store address name\n  seletedPhone: \"\"\n};\nconst getters = {\n  getDeliveryInfo(state) {\n    return {\n      country: state.selectedCountry,\n      state: state.selectedState,\n      city: state.selectedCity,\n      name: state.selectedName,\n      address: state.selectedAddress,\n      phone: state.seletedPhone\n    };\n  },\n  getProductUrl: state => state.productUrl,\n  getCartLength(state) {\n    return state.cartLength;\n  },\n  getCart(state) {\n    return state.cart;\n  },\n  getCartTotalPrice(state) {\n    let total = 0;\n    state.cart.map(product => {\n      total += product.price * product.quantity;\n    });\n    return total;\n  },\n  getCartTotalPriceWithShipping(state) {\n    let total = 0;\n    state.cart.map(product => {\n      total += product.price * product.quantity;\n    });\n    return total + state.shippingPrice;\n  },\n  getEstimatedDelivery(state) {\n    return state.shippingEstimatedDelivery;\n  },\n  isLoggedIn: state => !!state.token,\n  authStatus: state => state.status\n};\nconst actions = {\n  saveDeliveryInfo({\n    commit\n  }, formData) {\n    commit(\"setDeliveryInfo\", formData);\n  },\n  setProductUrl({\n    commit\n  }, url) {\n    commit(\"setProductUrl\", url);\n  },\n  addProductToCart({\n    state,\n    commit\n  }, product) {\n    // Ensure product has a unique ID if not already set\n    if (!product._id) {\n      product._id = `${product.title}-${Date.now()}`;\n    }\n\n    // Find product in cart using _id\n    const cartProduct = state.cart.find(prod => prod._id === product._id);\n    if (!cartProduct) {\n      commit(\"pushProductToCart\", {\n        ...product,\n        quantity: 1\n      });\n    } else {\n      commit(\"incrementProductQty\", cartProduct);\n    }\n    console.log(\"cart\", state.cart);\n    commit(\"incrementCartLength\");\n  },\n  clearCart({\n    commit\n  }) {\n    commit(\"clearCart\");\n  }\n};\nconst mutations = {\n  setDeliveryInfo(state, payload) {\n    state.selectedCountry = payload.selectedCountry;\n    state.selectedState = payload.selectedState;\n    state.selectedCity = payload.selectedCity;\n    state.selectedName = payload.selectedName;\n    state.selectedAddress = payload.selectedAddress;\n    state.seletedPhone = payload.selectedPhone;\n  },\n  setProductUrl(state, url) {\n    state.productUrl = url;\n  },\n  pushProductToCart(state, product) {\n    product.quantity = 1;\n    state.cart.push(product);\n  },\n  incrementProductQty(state, product) {\n    product.quantity++;\n    let indexOfProduct = state.cart.indexOf(product);\n    state.cart.splice(indexOfProduct, 1, product);\n  },\n  incrementCartLength(state) {\n    state.cartLength = 0;\n    if (state.cart.length > 0) {\n      state.cart.map(product => {\n        state.cartLength += product.quantity;\n      });\n    }\n  },\n  /*\r\n      1. Find the product in the cart\r\n      2. Change the quantity of the product\r\n      3. Update the length of the cart\r\n      4. replace the old product with the updated product\r\n      */\n  changeQty(state, {\n    product,\n    qty\n  }) {\n    let cartProduct = state.cart.find(prod => prod._id === product._id);\n    cartProduct.quantity = qty;\n    state.cartLength = 0;\n    if (state.cart.length > 0) {\n      state.cart.map(product => {\n        state.cartLength += product.quantity;\n      });\n    }\n    let indexOfProduct = state.cart.indexOf(cartProduct);\n    state.cart.splice(indexOfProduct, 1, cartProduct);\n  },\n  /*\r\n      1. remove the product quantity from the cartLength\r\n      2. get the index of the product that we want to delete\r\n      3. remove that product by using splice\r\n      */\n  removeProduct(state, product) {\n    state.cartLength -= product.quantity;\n    let indexOfProduct = state.cart.indexOf(product);\n    state.cart.splice(indexOfProduct, 1);\n  },\n  setShipping(state, {\n    price,\n    estimatedDelivery\n  }) {\n    state.shippingPrice = price;\n    state.shippingEstimatedDelivery = estimatedDelivery;\n  },\n  clearCart(state) {\n    state.cart = [];\n    state.cartLength = 0;\n    state.shippingPrice = 0;\n    state.shippingEstimatedDelivery = \"\";\n  }\n};\nexport default {\n  state,\n  getters,\n  actions,\n  mutations\n};","map":{"version":3,"names":["axios","state","cart","cartLength","shippingPrice","shippingEstimatedDelivery","productUrl","selectedCountry","selectedState","selectedCity","selectedName","selectedAddress","seletedPhone","getters","getDeliveryInfo","country","city","name","address","phone","getProductUrl","getCartLength","getCart","getCartTotalPrice","total","map","product","price","quantity","getCartTotalPriceWithShipping","getEstimatedDelivery","isLoggedIn","token","authStatus","status","actions","saveDeliveryInfo","commit","formData","setProductUrl","url","addProductToCart","_id","title","Date","now","cartProduct","find","prod","console","log","clearCart","mutations","setDeliveryInfo","payload","selectedPhone","pushProductToCart","push","incrementProductQty","indexOfProduct","indexOf","splice","incrementCartLength","length","changeQty","qty","removeProduct","setShipping","estimatedDelivery"],"sources":["C:/Users/ajib/OneDrive/Desktop/event-ticket/event-ticket-frontend/src/store/modules/cart.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst state = {\r\n  cart: [],\r\n  cartLength: 0,\r\n  shippingPrice: 0,\r\n  shippingEstimatedDelivery: \"\",\r\n  productUrl: \"\",\r\n  selectedCountry: \"\", // Store country name\r\n  selectedState: \"\", // Store state name\r\n  selectedCity: \"\",\r\n  selectedName: \"\", // Store city name\r\n  selectedAddress: \"\", // Store address name\r\n  seletedPhone: \"\",\r\n};\r\n\r\nconst getters = {\r\n  getDeliveryInfo(state) {\r\n    return {\r\n      country: state.selectedCountry,\r\n      state: state.selectedState,\r\n      city: state.selectedCity,\r\n      name: state.selectedName,\r\n      address: state.selectedAddress,\r\n      phone: state.seletedPhone,\r\n    };\r\n  },\r\n  getProductUrl: (state) => state.productUrl,\r\n\r\n  getCartLength(state) {\r\n    return state.cartLength;\r\n  },\r\n  getCart(state) {\r\n    return state.cart;\r\n  },\r\n  getCartTotalPrice(state) {\r\n    let total = 0;\r\n    state.cart.map((product) => {\r\n      total += product.price * product.quantity;\r\n    });\r\n\r\n    return total;\r\n  },\r\n  getCartTotalPriceWithShipping(state) {\r\n    let total = 0;\r\n    state.cart.map((product) => {\r\n      total += product.price * product.quantity;\r\n    });\r\n\r\n    return total + state.shippingPrice;\r\n  },\r\n  getEstimatedDelivery(state) {\r\n    return state.shippingEstimatedDelivery;\r\n  },\r\n  isLoggedIn: (state) => !!state.token,\r\n  authStatus: (state) => state.status,\r\n};\r\n\r\nconst actions = {\r\n  saveDeliveryInfo({ commit }, formData) {\r\n    commit(\"setDeliveryInfo\", formData);\r\n  },\r\n  setProductUrl({ commit }, url) {\r\n    commit(\"setProductUrl\", url);\r\n  },\r\n  addProductToCart({ state, commit }, product) {\r\n    // Ensure product has a unique ID if not already set\r\n    if (!product._id) {\r\n      product._id = `${product.title}-${Date.now()}`;\r\n    }\r\n\r\n    // Find product in cart using _id\r\n    const cartProduct = state.cart.find((prod) => prod._id === product._id);\r\n\r\n    if (!cartProduct) {\r\n      commit(\"pushProductToCart\", { ...product, quantity: 1 });\r\n    } else {\r\n      commit(\"incrementProductQty\", cartProduct);\r\n    }\r\n    console.log(\"cart\", state.cart);\r\n    commit(\"incrementCartLength\");\r\n  },\r\n  clearCart({ commit }) {\r\n    commit(\"clearCart\");\r\n  },\r\n};\r\n\r\nconst mutations = {\r\n  setDeliveryInfo(state, payload) {\r\n    state.selectedCountry = payload.selectedCountry;\r\n    state.selectedState = payload.selectedState;\r\n    state.selectedCity = payload.selectedCity;\r\n    state.selectedName = payload.selectedName;\r\n    state.selectedAddress = payload.selectedAddress;\r\n    state.seletedPhone = payload.selectedPhone;\r\n  },\r\n  setProductUrl(state, url) {\r\n    state.productUrl = url;\r\n  },\r\n\r\n  pushProductToCart(state, product) {\r\n    product.quantity = 1;\r\n    state.cart.push(product);\r\n  },\r\n\r\n  incrementProductQty(state, product) {\r\n    product.quantity++;\r\n    let indexOfProduct = state.cart.indexOf(product);\r\n    state.cart.splice(indexOfProduct, 1, product);\r\n  },\r\n\r\n  incrementCartLength(state) {\r\n    state.cartLength = 0;\r\n    if (state.cart.length > 0) {\r\n      state.cart.map((product) => {\r\n        state.cartLength += product.quantity;\r\n      });\r\n    }\r\n  },\r\n  /*\r\n      1. Find the product in the cart\r\n      2. Change the quantity of the product\r\n      3. Update the length of the cart\r\n      4. replace the old product with the updated product\r\n      */\r\n  changeQty(state, { product, qty }) {\r\n    let cartProduct = state.cart.find((prod) => prod._id === product._id);\r\n    cartProduct.quantity = qty;\r\n\r\n    state.cartLength = 0;\r\n    if (state.cart.length > 0) {\r\n      state.cart.map((product) => {\r\n        state.cartLength += product.quantity;\r\n      });\r\n    }\r\n\r\n    let indexOfProduct = state.cart.indexOf(cartProduct);\r\n    state.cart.splice(indexOfProduct, 1, cartProduct);\r\n  },\r\n  /*\r\n      1. remove the product quantity from the cartLength\r\n      2. get the index of the product that we want to delete\r\n      3. remove that product by using splice\r\n      */\r\n  removeProduct(state, product) {\r\n    state.cartLength -= product.quantity;\r\n    let indexOfProduct = state.cart.indexOf(product);\r\n    state.cart.splice(indexOfProduct, 1);\r\n  },\r\n\r\n  setShipping(state, { price, estimatedDelivery }) {\r\n    state.shippingPrice = price;\r\n    state.shippingEstimatedDelivery = estimatedDelivery;\r\n  },\r\n\r\n  clearCart(state) {\r\n    state.cart = [];\r\n    state.cartLength = 0;\r\n    state.shippingPrice = 0;\r\n    state.shippingEstimatedDelivery = \"\";\r\n  },\r\n};\r\n\r\nexport default {\r\n  state,\r\n  getters,\r\n  actions,\r\n  mutations,\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}