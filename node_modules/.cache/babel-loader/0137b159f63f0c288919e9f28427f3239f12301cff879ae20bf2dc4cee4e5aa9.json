{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, createStaticVNode as _createStaticVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"app\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createStaticVNode(\"<div class=\\\"nav\\\"><div class=\\\"container\\\"><div class=\\\"btn\\\">Home</div><div class=\\\"btn\\\">Contact</div><div class=\\\"btn\\\">About</div><div class=\\\"btn\\\">FAQ</div><svg class=\\\"outline\\\" overflow=\\\"visible\\\" width=\\\"400\\\" height=\\\"60\\\" viewBox=\\\"0 0 400 60\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><rect class=\\\"rect\\\" pathLength=\\\"100\\\" x=\\\"0\\\" y=\\\"0\\\" width=\\\"400\\\" height=\\\"60\\\" fill=\\\"transparent\\\" stroke-width=\\\"5\\\"></rect></svg></div></div>\", 1);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" From Uiverse.io by SelfMadeSystem \"), _hoisted_2]);\n}","map":{"version":3,"names":["id","_createElementBlock","_hoisted_1","_createCommentVNode","_hoisted_2"],"sources":["C:\\Users\\ajib\\OneDrive\\Desktop\\event-ticket\\vue3-restaurant-dashboard\\src\\components\\homepage\\topp.vue"],"sourcesContent":["<template>\r\n  <div id=\"app\">\r\n   <!-- From Uiverse.io by SelfMadeSystem --> \r\n<div class=\"nav\">\r\n  <div class=\"container\">\r\n    <div class=\"btn\">Home</div>\r\n    <div class=\"btn\">Contact</div>\r\n    <div class=\"btn\">About</div>\r\n    <div class=\"btn\">FAQ</div>\r\n    <svg\r\n      class=\"outline\"\r\n      overflow=\"visible\"\r\n      width=\"400\"\r\n      height=\"60\"\r\n      viewBox=\"0 0 400 60\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n    >\r\n      <rect\r\n        class=\"rect\"\r\n        pathLength=\"100\"\r\n        x=\"0\"\r\n        y=\"0\"\r\n        width=\"400\"\r\n        height=\"60\"\r\n        fill=\"transparent\"\r\n        stroke-width=\"5\"\r\n      ></rect>\r\n    </svg>\r\n  </div>\r\n</div>\r\n\r\n  </div>\r\n</template>\r\n\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      menuActive: false,\r\n      scrolled: false,\r\n      activeSection: \"home\",\r\n    };\r\n  },\r\n  mounted() {\r\n    window.addEventListener(\"scroll\", this.handleScroll);\r\n    this.revealSections();\r\n  },\r\n  methods: {\r\n    toggleMenu() {\r\n      this.menuActive = !this.menuActive;\r\n      document.body.classList.toggle(\"no-scroll\", this.menuActive);\r\n    },\r\n    closeMenu() {\r\n      this.menuActive = false;\r\n      document.body.classList.remove(\"no-scroll\");\r\n    },\r\n    handleScroll() {\r\n      this.scrolled = window.scrollY > 100;\r\n\r\n      const sections = document.querySelectorAll(\"section\");\r\n      const navbarHeight = document.querySelector(\".navbar\").offsetHeight;\r\n      const scrollPos = window.scrollY + navbarHeight;\r\n\r\n      sections.forEach((section) => {\r\n        const offsetTop = section.offsetTop;\r\n        const height = section.offsetHeight;\r\n\r\n        if (scrollPos >= offsetTop && scrollPos < offsetTop + height) {\r\n          this.activeSection = section.getAttribute(\"id\");\r\n        }\r\n\r\n        const sectionTop = section.getBoundingClientRect().top;\r\n        if (sectionTop < window.innerHeight - 150) {\r\n          section.classList.add(\"active\");\r\n        }\r\n      });\r\n    },\r\n    revealSections() {\r\n      setTimeout(() => this.handleScroll(), 50);\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style>/* From Uiverse.io by SelfMadeSystem */ \r\n.outline {\r\n  position: absolute;\r\n  inset: 0;\r\n  pointer-events: none;\r\n}\r\n\r\n.rect {\r\n  stroke-dashoffset: 5;\r\n  stroke-dasharray: 0 0 10 40 10 40;\r\n  transition: 0.5s;\r\n  stroke: #fff;\r\n}\r\n\r\n.nav {\r\n  position: relative;\r\n  width: 400px;\r\n  height: 60px;\r\n}\r\n\r\n.container:hover .outline .rect {\r\n  transition: 999999s;\r\n  /* Must specify these values here as something *different* just so that the transition works properly */\r\n  stroke-dashoffset: 1;\r\n  stroke-dasharray: 0;\r\n}\r\n\r\n.container {\r\n  position: absolute;\r\n  inset: 0;\r\n  background: #bef6;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  padding: 0.5em;\r\n}\r\n\r\n.btn {\r\n  padding: 0.5em 1.5em;\r\n  color: #fff;\r\n  cursor: pointer;\r\n  transition: 0.1s;\r\n}\r\n\r\n.btn:hover {\r\n  background: #fff3;\r\n}\r\n\r\n.btn:nth-child(1):hover ~ svg .rect {\r\n  stroke-dashoffset: 0;\r\n  stroke-dasharray: 0 2 8 73.3 8 10.7;\r\n}\r\n\r\n.btn:nth-child(2):hover ~ svg .rect {\r\n  stroke-dashoffset: 0;\r\n  stroke-dasharray: 0 12.6 9.5 49.3 9.5 31.6;\r\n}\r\n\r\n.btn:nth-child(3):hover ~ svg .rect {\r\n  stroke-dashoffset: 0;\r\n  stroke-dasharray: 0 24.5 8.5 27.5 8.5 55.5;\r\n}\r\n\r\n.btn:nth-child(4):hover ~ svg .rect {\r\n  stroke-dashoffset: 0;\r\n  stroke-dasharray: 0 34.7 6.9 10.2 6.9 76;\r\n}\r\n\r\n.btn:hover ~ .outline .rect {\r\n  stroke-dashoffset: 0;\r\n  stroke-dasharray: 0 0 10 40 10 40;\r\n  transition: 0.5s !important;\r\n}\r\n\r\n</style>\r\n"],"mappings":";;EACOA,EAAE,EAAC;AAAK;;;uBAAbC,mBAAA,CA8BM,OA9BNC,UA8BM,GA7BLC,mBAAA,uCAA0C,EAC7CC,UA0BM,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}