{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  name: \"CategoryManager\",\n  data() {\n    return {\n      API: \"http://localhost:4000/api\",\n      categories: [],\n      form: {\n        type: \"\",\n        photo: null,\n        _id: null\n      },\n      isEditing: false\n    };\n  },\n  methods: {\n    async fetchCategories() {\n      try {\n        const res = await axios.get(`${this.API}/categories`);\n        this.categories = res.data.categories;\n      } catch (err) {\n        console.error(\"Error fetching categories:\", err.message);\n      }\n    },\n    handlePhoto(event) {\n      this.form.photo = event.target.files[0];\n    },\n    async createCategory() {\n      try {\n        const formData = new FormData();\n        formData.append(\"type\", this.form.type);\n        formData.append(\"photo\", this.form.photo);\n        await axios.post(`${this.API}/categories`, formData, {\n          headers: {\n            \"Content-Type\": \"multipart/form-data\"\n          }\n        });\n        this.resetForm();\n        this.fetchCategories();\n      } catch (err) {\n        console.error(\"Error creating category:\", err.message);\n      }\n    },\n    editCategory(category) {\n      this.form.type = category.type;\n      this.form._id = category._id;\n      this.form.photo = null; // Will not re-upload unless changed\n      this.isEditing = true;\n    },\n    async updateCategory() {\n      try {\n        // If photo is not changed, send existing URL\n        let photoUrl = this.categories.find(c => c._id === this.form._id)?.photo;\n        await axios.put(`${this.API}/categories/${this.form._id}`, {\n          type: this.form.type,\n          photo: photoUrl // backend expects a string for photo in PUT\n        });\n\n        this.resetForm();\n        this.fetchCategories();\n      } catch (err) {\n        console.error(\"Error updating category:\", err.message);\n      }\n    },\n    async deleteCategory(id) {\n      if (!confirm(\"Are you sure you want to delete this category?\")) return;\n      try {\n        await axios.delete(`${this.API}/categories/${id}`);\n        this.fetchCategories();\n      } catch (err) {\n        console.error(\"Error deleting category:\", err.message);\n      }\n    },\n    cancelEdit() {\n      this.resetForm();\n    },\n    resetForm() {\n      this.form = {\n        type: \"\",\n        photo: null,\n        _id: null\n      };\n      this.isEditing = false;\n    }\n  },\n  mounted() {\n    this.fetchCategories();\n  }\n};","map":{"version":3,"names":["axios","name","data","API","categories","form","type","photo","_id","isEditing","methods","fetchCategories","res","get","err","console","error","message","handlePhoto","event","target","files","createCategory","formData","FormData","append","post","headers","resetForm","editCategory","category","updateCategory","photoUrl","find","c","put","deleteCategory","id","confirm","delete","cancelEdit","mounted"],"sources":["C:\\Users\\ajib\\OneDrive\\Desktop\\event-ticket\\event-ticket-frontend\\src\\components\\app\\admin\\category.vue"],"sourcesContent":["<template>\r\n  <div class=\"container mt-4\">\r\n    <h2>Categories</h2>\r\n\r\n    <!-- Form -->\r\n    <form @submit.prevent=\"isEditing ? updateCategory() : createCategory()\" class=\"mb-4\">\r\n      <div class=\"mb-2\">\r\n        <input v-model=\"form.type\" type=\"text\" placeholder=\"Category type\" class=\"form-control\" required />\r\n      </div>\r\n      <div class=\"mb-2\">\r\n        <input type=\"file\" @change=\"handlePhoto\" class=\"form-control\" :required=\"!isEditing\" />\r\n      </div>\r\n      <button type=\"submit\" class=\"btn btn-success me-2\">\r\n        {{ isEditing ? \"Update\" : \"Create\" }}\r\n      </button>\r\n      <button type=\"button\" v-if=\"isEditing\" class=\"btn btn-secondary\" @click=\"cancelEdit\">Cancel</button>\r\n    </form>\r\n\r\n    <!-- Categories Table -->\r\n    <table class=\"table table-bordered\">\r\n      <thead>\r\n        <tr>\r\n          <th>Type</th>\r\n          <th>Photo</th>\r\n          <th>Actions</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"category in categories\" :key=\"category._id\">\r\n          <td>{{ category.type }}</td>\r\n          <td>\r\n            <img :src=\"category.photo\" alt=\"Category photo\" width=\"80\" />\r\n          </td>\r\n          <td>\r\n            <button class=\"btn btn-sm btn-primary me-2\" @click=\"editCategory(category)\">Edit</button>\r\n            <button class=\"btn btn-sm btn-danger\" @click=\"deleteCategory(category._id)\">Delete</button>\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  name: \"CategoryManager\",\r\n  data() {\r\n    return {\r\n      API: \"http://localhost:4000/api\",\r\n      categories: [],\r\n      form: {\r\n        type: \"\",\r\n        photo: null,\r\n        _id: null,\r\n      },\r\n      isEditing: false,\r\n    };\r\n  },\r\n  methods: {\r\n    async fetchCategories() {\r\n      try {\r\n        const res = await axios.get(`${this.API}/categories`);\r\n        this.categories = res.data.categories;\r\n      } catch (err) {\r\n        console.error(\"Error fetching categories:\", err.message);\r\n      }\r\n    },\r\n    handlePhoto(event) {\r\n      this.form.photo = event.target.files[0];\r\n    },\r\n    async createCategory() {\r\n      try {\r\n        const formData = new FormData();\r\n        formData.append(\"type\", this.form.type);\r\n        formData.append(\"photo\", this.form.photo);\r\n\r\n        await axios.post(`${this.API}/categories`, formData, {\r\n          headers: { \"Content-Type\": \"multipart/form-data\" },\r\n        });\r\n\r\n        this.resetForm();\r\n        this.fetchCategories();\r\n      } catch (err) {\r\n        console.error(\"Error creating category:\", err.message);\r\n      }\r\n    },\r\n    editCategory(category) {\r\n      this.form.type = category.type;\r\n      this.form._id = category._id;\r\n      this.form.photo = null; // Will not re-upload unless changed\r\n      this.isEditing = true;\r\n    },\r\n    async updateCategory() {\r\n      try {\r\n        // If photo is not changed, send existing URL\r\n        let photoUrl = this.categories.find(c => c._id === this.form._id)?.photo;\r\n\r\n        await axios.put(`${this.API}/categories/${this.form._id}`, {\r\n          type: this.form.type,\r\n          photo: photoUrl, // backend expects a string for photo in PUT\r\n        });\r\n\r\n        this.resetForm();\r\n        this.fetchCategories();\r\n      } catch (err) {\r\n        console.error(\"Error updating category:\", err.message);\r\n      }\r\n    },\r\n    async deleteCategory(id) {\r\n      if (!confirm(\"Are you sure you want to delete this category?\")) return;\r\n\r\n      try {\r\n        await axios.delete(`${this.API}/categories/${id}`);\r\n        this.fetchCategories();\r\n      } catch (err) {\r\n        console.error(\"Error deleting category:\", err.message);\r\n      }\r\n    },\r\n    cancelEdit() {\r\n      this.resetForm();\r\n    },\r\n    resetForm() {\r\n      this.form = { type: \"\", photo: null, _id: null };\r\n      this.isEditing = false;\r\n    },\r\n  },\r\n  mounted() {\r\n    this.fetchCategories();\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\nimg {\r\n  object-fit: cover;\r\n  border-radius: 4px;\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}