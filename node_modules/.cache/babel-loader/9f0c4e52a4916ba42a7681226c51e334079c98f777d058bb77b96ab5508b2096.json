{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\";\nconst state = {\n  cart: [],\n  cartLength: 0,\n  shippingPrice: 0,\n  shippingEstimatedDelivery: \"\"\n\n  //  token: localStorage.getItem(\"token\") || \"\"\n};\n\nconst getters = {\n  getCartLength(state) {\n    return state.cartLength;\n  },\n  getCart(state) {\n    return state.cart;\n  },\n  getCartTotalPrice(state) {\n    let total = 0;\n    state.cart.map(product => {\n      total += product.price * product.quantity;\n    });\n    return total;\n  },\n  getCartTotalPriceWithShipping(state) {\n    let total = 0;\n    state.cart.map(product => {\n      total += product.price * product.quantity;\n    });\n    return total + state.shippingPrice;\n  },\n  getEstimatedDelivery(state) {\n    return state.shippingEstimatedDelivery;\n  },\n  getShippingPrice(state) {\n    return state.shippingPrice;\n  }\n};\nconst actions = {\n  addProductToCart({\n    state,\n    commit\n  }, product) {\n    const cartProduct = state.cart.find(prod => prod._id === product._id);\n    if (!cartProduct) {\n      commit(\"pushProductToCart\", product);\n    } else {\n      commit(\"incrementProductQty\", cartProduct);\n    }\n    commit(\"incrementCartLength\");\n  }\n};\nconst mutations = {\n  set_login(state) {\n    state.logged = !state.logged;\n  },\n  pushProductToCart(state, product) {\n    product.quantity = 1;\n    state.cart.push(product);\n    this.commit('saveCart');\n  },\n  saveCart(state) {\n    window.localStorage.setItem(\"product\", JSON.stringify(state.product));\n  },\n  incrementProductQty(state, product) {\n    product.quantity++;\n    let indexOfProduct = state.cart.indexOf(product);\n    state.cart.splice(indexOfProduct, 1, product);\n  },\n  incrementCartLength(state) {\n    state.cartLength = 0;\n    if (state.cart.length > 0) {\n      state.cart.map(product => {\n        state.cartLength += product.quantity;\n      });\n    }\n  },\n  /*\r\n      1. Find the product in the cart\r\n      2. Change the quantity of the product\r\n      3. Update the length of the cart\r\n      4. replace the old product with the updated product\r\n      */\n  changeQty(state, {\n    product,\n    qty\n  }) {\n    let cartProduct = state.cart.find(prod => prod._id === product._id);\n    cartProduct.quantity = qty;\n    state.cartLength = 0;\n    if (state.cart.length > 0) {\n      state.cart.map(product => {\n        state.cartLength += product.quantity;\n      });\n    }\n    let indexOfProduct = state.cart.indexOf(cartProduct);\n    state.cart.splice(indexOfProduct, 1, cartProduct);\n  },\n  /*\r\n      1. remove the product quantity from the cartLength\r\n      2. get the index of the product that we want to delete\r\n      3. remove that product by using splice\r\n      */\n  removeProduct(state, product) {\n    state.cartLength -= product.quantity;\n    let indexOfProduct = state.cart.indexOf(product);\n    state.cart.splice(indexOfProduct, 1);\n  },\n  setShipping(state, {\n    price,\n    estimatedDelivery\n  }) {\n    state.shippingPrice = price;\n    state.shippingEstimatedDelivery = estimatedDelivery;\n  },\n  setShipping(state, {\n    price,\n    estimatedDelivery\n  }) {\n    state.shippingPrice = price;\n    state.shippingEstimatedDelivery = estimatedDelivery;\n  },\n  clearCart(state) {\n    state.cart = [];\n    state.cartLength = 0;\n    state.shippingPrice = 0;\n    state.shippingEstimatedDelivery = \"\";\n  }\n};\nexport default {\n  state,\n  getters,\n  actions,\n  mutations\n};","map":{"version":3,"names":["axios","state","cart","cartLength","shippingPrice","shippingEstimatedDelivery","getters","getCartLength","getCart","getCartTotalPrice","total","map","product","price","quantity","getCartTotalPriceWithShipping","getEstimatedDelivery","getShippingPrice","actions","addProductToCart","commit","cartProduct","find","prod","_id","mutations","set_login","logged","pushProductToCart","push","saveCart","window","localStorage","setItem","JSON","stringify","incrementProductQty","indexOfProduct","indexOf","splice","incrementCartLength","length","changeQty","qty","removeProduct","setShipping","estimatedDelivery","clearCart"],"sources":["C:/Users/ajib/OneDrive/Desktop/event-ticket/event-ticket-frontend/src/store/modules/cart.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst state = {\r\n  cart: [],\r\n  cartLength: 0,\r\n  shippingPrice: 0,\r\n  shippingEstimatedDelivery: \"\",\r\n\r\n//  token: localStorage.getItem(\"token\") || \"\"\r\n};\r\n\r\nconst getters = {\r\n\r\n  getCartLength(state) {\r\n    return state.cartLength;\r\n  },\r\n  getCart(state) {\r\n    return state.cart;\r\n  },\r\n  getCartTotalPrice(state) {\r\n    let total = 0;\r\n    state.cart.map(product => {\r\n      total += product.price * product.quantity;\r\n    });\r\n\r\n    return total;\r\n  },\r\n  getCartTotalPriceWithShipping(state) {\r\n    let total = 0;\r\n    state.cart.map(product => {\r\n      total += product.price * product.quantity;\r\n    });\r\n\r\n    return total + state.shippingPrice;\r\n  },\r\n  getEstimatedDelivery(state) {\r\n    return state.shippingEstimatedDelivery;\r\n  },\r\n  getShippingPrice(state) {\r\n    return state.shippingPrice;\r\n  },\r\n\r\n\r\n};\r\n\r\nconst actions = {\r\n  addProductToCart({ state, commit }, product) {\r\n    const cartProduct = state.cart.find(prod => prod._id === product._id);\r\n\r\n    if (!cartProduct) {\r\n      commit(\"pushProductToCart\", product);\r\n    } else {\r\n      commit(\"incrementProductQty\", cartProduct);\r\n    }\r\n\r\n    commit(\"incrementCartLength\");\r\n  }\r\n};\r\n\r\nconst mutations = {\r\n  set_login(state) {\r\n    state.logged = !state.logged;\r\n  },\r\n  pushProductToCart(state, product) {\r\n    product.quantity = 1;\r\n    state.cart.push(product);\r\n    this.commit('saveCart');\r\n\r\n  },\r\n  saveCart(state) {\r\n    window.localStorage.setItem(\"product\", JSON.stringify(state.product));\r\n  },\r\n  incrementProductQty(state, product) {\r\n    product.quantity++;\r\n    let indexOfProduct = state.cart.indexOf(product);\r\n    state.cart.splice(indexOfProduct, 1, product);\r\n  },\r\n\r\n  incrementCartLength(state) {\r\n    state.cartLength = 0;\r\n    if (state.cart.length > 0) {\r\n      state.cart.map(product => {\r\n        state.cartLength += product.quantity;\r\n      });\r\n    }\r\n  },\r\n  /*\r\n      1. Find the product in the cart\r\n      2. Change the quantity of the product\r\n      3. Update the length of the cart\r\n      4. replace the old product with the updated product\r\n      */\r\n  changeQty(state, { product, qty }) {\r\n    let cartProduct = state.cart.find(prod => prod._id === product._id);\r\n    cartProduct.quantity = qty;\r\n\r\n    state.cartLength = 0;\r\n    if (state.cart.length > 0) {\r\n      state.cart.map(product => {\r\n        state.cartLength += product.quantity;\r\n      });\r\n    }\r\n\r\n    let indexOfProduct = state.cart.indexOf(cartProduct);\r\n    state.cart.splice(indexOfProduct, 1, cartProduct);\r\n  },\r\n  /*\r\n      1. remove the product quantity from the cartLength\r\n      2. get the index of the product that we want to delete\r\n      3. remove that product by using splice\r\n      */\r\n  removeProduct(state, product) {\r\n    state.cartLength -= product.quantity;\r\n    let indexOfProduct = state.cart.indexOf(product);\r\n    state.cart.splice(indexOfProduct, 1);\r\n  },\r\n  setShipping(state, { price, estimatedDelivery }) {\r\n    state.shippingPrice = price;\r\n    state.shippingEstimatedDelivery = estimatedDelivery;\r\n  },\r\n  setShipping(state, { price, estimatedDelivery }) {\r\n    state.shippingPrice = price;\r\n    state.shippingEstimatedDelivery = estimatedDelivery;\r\n  },\r\n\r\n  clearCart(state) {\r\n    state.cart = [];\r\n    state.cartLength = 0;\r\n    state.shippingPrice = 0;\r\n    state.shippingEstimatedDelivery = \"\";\r\n  },\r\n\r\n};\r\n\r\nexport default {\r\n  state,\r\n  getters,\r\n  actions,\r\n  mutations\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}