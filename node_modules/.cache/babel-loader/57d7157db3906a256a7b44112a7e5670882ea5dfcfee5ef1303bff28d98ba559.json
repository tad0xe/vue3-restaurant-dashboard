{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'OrdersTable',\n  data() {\n    return {\n      orders: [],\n      editableOrders: []\n    };\n  },\n  async mounted() {\n    await this.fetchOrders();\n  },\n  methods: {\n    async fetchOrders() {\n      try {\n        const response = await axios.get('http://localhost:4000/api/all-orders');\n        this.orders = response.data.orders;\n\n        // Clone orders into editableOrders to avoid mutating original directly\n        this.editableOrders = JSON.parse(JSON.stringify(this.orders));\n      } catch (error) {\n        console.error('Failed to fetch orders:', error);\n      }\n    },\n    async updateOrder(order) {\n      try {\n        const response = await axios.put(`http://localhost:4000/api/order/${order._id}/update`, {\n          title: order.title,\n          contact: {\n            email: order.contact.email,\n            phone: order.contact.phone\n          },\n          price: order.price,\n          tickets: order.tickets\n        });\n        alert('Order updated successfully');\n        // Optionally refresh list:\n        await this.fetchOrders();\n      } catch (error) {\n        console.error('Failed to update order:', error);\n        alert('Error updating order');\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","orders","editableOrders","mounted","fetchOrders","methods","response","get","JSON","parse","stringify","error","console","updateOrder","order","put","_id","title","contact","email","phone","price","tickets","alert"],"sources":["C:\\Users\\ajib\\OneDrive\\Desktop\\event-ticket\\event-ticket-frontend\\src\\components\\dashboard\\orderlist.vue"],"sourcesContent":["<template>\r\n  <div class=\"table-container\">\r\n    <table class=\"custom-table\">\r\n      <thead>\r\n        <tr>\r\n          <th>Order ID</th>\r\n          <th>Date</th>\r\n          <th>Name of Event</th>\r\n          <th>Customer Email</th>\r\n          <th>Phone Number</th>\r\n          <th>Amount</th>\r\n          <th>Ticket Type</th>\r\n          <th>Actions</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"(order, index) in editableOrders\" :key=\"order._id\">\r\n          <td>{{ order._id }}</td>\r\n          <td>{{ new Date(order.createdAt).toLocaleString() }}</td>\r\n\r\n          <!-- Editable Fields -->\r\n          <td>\r\n            <input v-model=\"order.title\" />\r\n          </td>\r\n          <td>\r\n            <input v-model=\"order.contact.email\" />\r\n          </td>\r\n          <td>\r\n            <input v-model=\"order.contact.phone\" />\r\n          </td>\r\n          <td>\r\n            <input type=\"number\" v-model.number=\"order.price\" />\r\n          </td>\r\n          <td>\r\n            <div v-for=\"(ticket, tIndex) in order.tickets\" :key=\"ticket._id || tIndex\">\r\n              <input v-model=\"ticket.name\" placeholder=\"Type\" />\r\n              <input type=\"number\" v-model.number=\"ticket.quantity\" placeholder=\"Qty\" />\r\n            </div>\r\n          </td>\r\n\r\n          <!-- Save Button -->\r\n          <td>\r\n            <button @click=\"updateOrder(order)\">Save</button>\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  name: 'OrdersTable',\r\n  data() {\r\n    return {\r\n      orders: [],\r\n      editableOrders: [],\r\n    };\r\n  },\r\n  async mounted() {\r\n    await this.fetchOrders();\r\n  },\r\n  methods: {\r\n    async fetchOrders() {\r\n      try {\r\n        const response = await axios.get('http://localhost:4000/api/all-orders');\r\n        this.orders = response.data.orders;\r\n\r\n        // Clone orders into editableOrders to avoid mutating original directly\r\n        this.editableOrders = JSON.parse(JSON.stringify(this.orders));\r\n      } catch (error) {\r\n        console.error('Failed to fetch orders:', error);\r\n      }\r\n    },\r\n\r\n    async updateOrder(order) {\r\n      try {\r\n        const response = await axios.put(`http://localhost:4000/api/order/${order._id}/update`, {\r\n          title: order.title,\r\n          contact: {\r\n            email: order.contact.email,\r\n            phone: order.contact.phone,\r\n          },\r\n          price: order.price,\r\n          tickets: order.tickets,\r\n        });\r\n\r\n        alert('Order updated successfully');\r\n        // Optionally refresh list:\r\n        await this.fetchOrders();\r\n      } catch (error) {\r\n        console.error('Failed to update order:', error);\r\n        alert('Error updating order');\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n.custom-table {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.custom-table th,\r\n.custom-table td {\r\n  padding: 10px;\r\n  text-align: left;\r\n  border-bottom: 1px solid #ddd;\r\n}\r\n\r\n.custom-table th {\r\n  background-color: #f5f5f5;\r\n}\r\n\r\n.custom-table td button {\r\n  padding: 5px 10px;\r\n  font-size: 14px;\r\n  border-radius: 4px;\r\n}\r\n\r\n.custom-table td .dropdown-menu {\r\n  margin-top: 5px;\r\n}\r\n\r\n.custom-table td .dropdown-menu button {\r\n  width: 100%;\r\n  text-align: left;\r\n}\r\n.pagination {\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: 10px;\r\n}\r\n\r\n.pagination button {\r\n  border: 1px solid #ccc;\r\n  background-color: #fff;\r\n  color: #000;\r\n  padding: 5px 10px;\r\n  margin: 0 5px;\r\n  cursor: pointer;\r\n}\r\n\r\n.pagination button.active {\r\n  background-color: #f4a213;\r\n  color: #fff;\r\n}\r\n\r\n.filter {\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.filter label {\r\n  margin-right: 5px;\r\n}\r\n.table-container {\r\n  overflow-x: auto;\r\n}\r\n\r\n.scrollable-tbody {\r\n  display: block;\r\n  white-space: nowrap;\r\n}\r\n</style>\r\n"],"mappings":"AAmDA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,aAAa;EACnBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,MAAM,EAAE,EAAE;MACVC,cAAc,EAAE;IAClB,CAAC;EACH,CAAC;EACD,MAAMC,OAAOA,CAAA,EAAG;IACd,MAAM,IAAI,CAACC,WAAW,CAAC,CAAC;EAC1B,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,WAAWA,CAAA,EAAG;MAClB,IAAI;QACF,MAAME,QAAO,GAAI,MAAMR,KAAK,CAACS,GAAG,CAAC,sCAAsC,CAAC;QACxE,IAAI,CAACN,MAAK,GAAIK,QAAQ,CAACN,IAAI,CAACC,MAAM;;QAElC;QACA,IAAI,CAACC,cAAa,GAAIM,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAAC,IAAI,CAACT,MAAM,CAAC,CAAC;MAC/D,EAAE,OAAOU,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD;IACF,CAAC;IAED,MAAME,WAAWA,CAACC,KAAK,EAAE;MACvB,IAAI;QACF,MAAMR,QAAO,GAAI,MAAMR,KAAK,CAACiB,GAAG,CAAE,mCAAkCD,KAAK,CAACE,GAAI,SAAQ,EAAE;UACtFC,KAAK,EAAEH,KAAK,CAACG,KAAK;UAClBC,OAAO,EAAE;YACPC,KAAK,EAAEL,KAAK,CAACI,OAAO,CAACC,KAAK;YAC1BC,KAAK,EAAEN,KAAK,CAACI,OAAO,CAACE;UACvB,CAAC;UACDC,KAAK,EAAEP,KAAK,CAACO,KAAK;UAClBC,OAAO,EAAER,KAAK,CAACQ;QACjB,CAAC,CAAC;QAEFC,KAAK,CAAC,4BAA4B,CAAC;QACnC;QACA,MAAM,IAAI,CAACnB,WAAW,CAAC,CAAC;MAC1B,EAAE,OAAOO,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;QAC/CY,KAAK,CAAC,sBAAsB,CAAC;MAC/B;IACF;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}