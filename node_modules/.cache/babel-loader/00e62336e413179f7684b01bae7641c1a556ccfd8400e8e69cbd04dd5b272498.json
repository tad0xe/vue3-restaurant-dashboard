{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  data() {\n    return {\n      baseUrl: \"https://event-ticket-qa70.onrender.com/api\",\n      categories: [],\n      newCategory: {\n        type: \"\",\n        photo: null\n      },\n      editingCategory: null,\n      selectedFile: null,\n      editingFile: null,\n      singleCategory: null\n    };\n  },\n  mounted() {\n    this.$notify({\n      title: 'Welcome!',\n      text: 'This came from global $notify',\n      type: 'info'\n    });\n    this.fetchCategories();\n  },\n  methods: {\n    async fetchCategories() {\n      const res = await axios.get(`${this.baseUrl}/categories`);\n      this.categories = res.data.categories;\n    },\n    handleFileChange(e) {\n      this.selectedFile = e.target.files[0];\n    },\n    async createCategory() {\n      const formData = new FormData();\n      formData.append(\"type\", this.newCategory.type);\n      if (this.selectedFile) {\n        formData.append(\"photo\", this.selectedFile);\n      }\n      await axios.post(`${this.baseUrl}/categories`, formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      });\n      this.newCategory = {\n        type: \"\",\n        photo: null\n      };\n      this.selectedFile = null;\n      this.fetchCategories();\n    },\n    editCategory(cat) {\n      this.editingCategory = {\n        ...cat\n      };\n      this.editingFile = null;\n    },\n    handleEditFileChange(e) {\n      this.editingFile = e.target.files[0];\n    },\n    async updateCategory() {\n      const formData = new FormData();\n      formData.append(\"type\", this.editingCategory.type);\n      if (this.editingFile) {\n        formData.append(\"photo\", this.editingFile);\n      }\n      await axios.put(`${this.baseUrl}/categories/${this.editingCategory._id}`, formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      }, alert('categories updated'));\n      this.editingCategory = null;\n      this.editingFile = null;\n      this.fetchCategories();\n    },\n    async deleteCategory(id) {\n      await axios.delete(`${this.baseUrl}/categories/${id}`);\n      this.$notify(\"Category deleted\");\n      this.fetchCategories();\n    },\n    async getCategory(id) {\n      const res = await axios.get(`${this.baseUrl}/categories/${id}`);\n      this.singleCategory = res.data.category;\n    }\n  }\n};","map":{"version":3,"names":["axios","data","baseUrl","categories","newCategory","type","photo","editingCategory","selectedFile","editingFile","singleCategory","mounted","$notify","title","text","fetchCategories","methods","res","get","handleFileChange","e","target","files","createCategory","formData","FormData","append","post","headers","editCategory","cat","handleEditFileChange","updateCategory","put","_id","alert","deleteCategory","id","delete","getCategory","category"],"sources":["C:\\Users\\ajib\\OneDrive\\Desktop\\event-ticket\\event-ticket-frontend\\src\\components\\app\\admin\\category.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <h1>Category Manager</h1>\r\n\r\n    <!-- Create Category Form -->\r\n    <form @submit.prevent=\"createCategory\" enctype=\"multipart/form-data\">\r\n      <input v-model=\"newCategory.type\" placeholder=\"Category Type\" required />\r\n      <input type=\"file\" @change=\"handleFileChange\" />\r\n      <button type=\"submit\">Create Category</button>\r\n    </form>\r\n\r\n    <hr />\r\n\r\n    <!-- List All Categories -->\r\n    <h2>All Categories</h2>\r\n    <div v-if=\"categories.length\">\r\n      <div v-for=\"cat in categories\" :key=\"cat._id\" class=\"category-box\">\r\n        <p><strong>Type:</strong> {{ cat.type }}</p>\r\n        <img v-if=\"cat.photo\" :src=\"cat.photo\" width=\"150\" />\r\n        <br />\r\n        <button @click=\"getCategory(cat._id)\">View</button>\r\n        <button @click=\"editCategory(cat)\">Edit</button>\r\n        <button @click=\"deleteCategory(cat._id)\">Delete</button>\r\n      </div>\r\n    </div>\r\n    <div v-else>No categories found.</div>\r\n\r\n    <hr />\r\n\r\n    <!-- Edit Category -->\r\n    <div v-if=\"editingCategory\">\r\n      <h2>Edit Category</h2>\r\n      <form @submit.prevent=\"updateCategory\" enctype=\"multipart/form-data\">\r\n        <input v-model=\"editingCategory.type\" placeholder=\"Category Type\" />\r\n        <input type=\"file\" @change=\"handleEditFileChange\" />\r\n        <button type=\"submit\">Update</button>\r\n        <button type=\"button\" @click=\"editingCategory = null\">Cancel</button>\r\n      </form>\r\n    </div>\r\n\r\n    <!-- View Single Category -->\r\n    <div v-if=\"singleCategory\">\r\n      <h2>Single Category</h2>\r\n      <p><strong>Type:</strong> {{ singleCategory.type }}</p>\r\n      <img :src=\"singleCategory.photo\" width=\"150\" />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      baseUrl: \"https://event-ticket-qa70.onrender.com/api\",\r\n      categories: [],\r\n      newCategory: { type: \"\", photo: null },\r\n      editingCategory: null,\r\n      selectedFile: null,\r\n      editingFile: null,\r\n      singleCategory: null,\r\n    };\r\n  },\r\n  mounted() {\r\n      this.$notify({\r\n      title: 'Welcome!',\r\n      text: 'This came from global $notify',\r\n      type: 'info',\r\n    });\r\n    this.fetchCategories();\r\n  },\r\n  methods: {\r\n    async fetchCategories() {\r\n      const res = await axios.get(`${this.baseUrl}/categories`);\r\n      this.categories = res.data.categories;\r\n    },\r\n    handleFileChange(e) {\r\n      this.selectedFile = e.target.files[0];\r\n    },\r\n    async createCategory() {\r\n      const formData = new FormData();\r\n      formData.append(\"type\", this.newCategory.type);\r\n      if (this.selectedFile) {\r\n        formData.append(\"photo\", this.selectedFile);\r\n      }\r\n\r\n      await axios.post(`${this.baseUrl}/categories`, formData, {\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      });\r\n\r\n      this.newCategory = { type: \"\", photo: null };\r\n      this.selectedFile = null;\r\n      this.fetchCategories();\r\n    },\r\n    editCategory(cat) {\r\n      this.editingCategory = { ...cat };\r\n      this.editingFile = null;\r\n    },\r\n    handleEditFileChange(e) {\r\n      this.editingFile = e.target.files[0];\r\n    },\r\n    async updateCategory() {\r\n      const formData = new FormData();\r\n      formData.append(\"type\", this.editingCategory.type);\r\n      if (this.editingFile) {\r\n        formData.append(\"photo\", this.editingFile);\r\n      }\r\n\r\n      await axios.put(\r\n        `${this.baseUrl}/categories/${this.editingCategory._id}`,\r\n        formData,\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"multipart/form-data\",\r\n          },\r\n        },\r\n        alert('categories updated')\r\n      );\r\n\r\n      this.editingCategory = null;\r\n      this.editingFile = null;\r\n      this.fetchCategories();\r\n    },\r\n    async deleteCategory(id) {\r\n      await axios.delete(`${this.baseUrl}/categories/${id}`);\r\n      this.$notify(\"Category deleted\");\r\n      this.fetchCategories();\r\n    },\r\n    async getCategory(id) {\r\n      const res = await axios.get(`${this.baseUrl}/categories/${id}`);\r\n      this.singleCategory = res.data.category;\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.container {\r\n  padding: 20px;\r\n  font-family: Arial;\r\n}\r\n.category-box {\r\n  border: 1px solid #ccc;\r\n  padding: 10px;\r\n  margin-bottom: 10px;\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}