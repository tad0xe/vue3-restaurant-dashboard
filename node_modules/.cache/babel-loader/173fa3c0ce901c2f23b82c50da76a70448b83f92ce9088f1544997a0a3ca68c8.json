{"ast":null,"code":"import axiosInstance from \"../../helpers/axiosInstance\";\nconst state = {\n  products: [],\n  product: [],\n  sortedProducts: [],\n  likedProducts: [],\n  highestSellingProduct: null,\n  getProductsByUser: []\n};\nconst mutations = {\n  SET_HIGHEST_SELLING_PRODUCT(state, products) {\n    state.highestSellingProduct = products;\n  },\n  SET_PRODUCTS_BY_USER(state, products) {\n    state.getProductsByUser = products;\n  },\n  SET_PRODUCTS(state, products) {\n    state.products = products;\n  },\n  SET_PRODUCT(state, product) {\n    state.product = product;\n  },\n  SET_SORTED_PRODUCTS(state, sortedProducts) {\n    state.sortedProducts = sortedProducts;\n  },\n  SET_LIKED_PRODUCTS(state, likedProducts) {\n    state.likedProducts = likedProducts;\n  },\n  INCREMENT_LIKES(state) {\n    if (state.products) {\n      state.products.likes++;\n    }\n  }\n};\nconst actions = {\n  async createProduct({\n    commit\n  }, formData) {\n    try {\n      const response = await axiosInstance.post('/products', formData);\n      // Handle successful response if needed\n      return response.data;\n    } catch (error) {\n      // Handle error if needed\n      throw error;\n    }\n  },\n  fetchHighestSellingProducts({\n    commit\n  }) {\n    return axiosInstance.get('/highest-selling-product').then(response => {\n      const products = response.data.highestSellingProducts;\n      commit('SET_HIGHEST_SELLING_PRODUCT', products);\n    }).catch(error => {\n      console.error(error);\n    });\n  },\n  fetchProducts({\n    commit\n  }) {\n    return axiosInstance.get('/products').then(response => {\n      commit('SET_PRODUCTS', response.data.products);\n    }).catch(error => {\n      console.error(error);\n    });\n  },\n  fetchProductsByUser({\n    commit\n  }) {\n    return axiosInstance.get('/user/products').then(response => {\n      commit('SET_PRODUCTS', response.data.products);\n    }).catch(error => {\n      console.error(error);\n    });\n  },\n  fetchSortedProducts({\n    commit\n  }) {\n    return axiosInstance.get(\"/products\").then(response => {\n      const products = response.data.products;\n      const sortedProducts = products.sort((a, b) => b.views - a.views);\n      commit(\"SET_SORTED_PRODUCTS\", sortedProducts);\n    }).catch(error => {\n      console.log(error);\n    });\n  },\n  fetchLikedProducts({\n    commit\n  }) {\n    return axiosInstance.get(\"/products\").then(response => {\n      const products = response.data.products;\n      const likedProducts = products.sort((a, b) => b.likes - a.likes);\n      commit(\"SET_LIKED_PRODUCTS\", likedProducts);\n    }).catch(error => {\n      console.log(error);\n    });\n  },\n  likeProducts({\n    commit\n  }, productId) {\n    return axiosInstance.post(`/products/${productId}/like`).then(response => {\n      //    console.log(response)\n      commit('INCREMENT_LIKES');\n      const products = response.data.likes;\n      // Handle the response if needed\n    }).catch(error => {\n      console.error(error);\n    });\n  },\n  incrementViews({\n    commit\n  }, productId) {\n    return axiosInstance.post(`/products/${productId}/views`).then(response => {\n      // Handle the response if needed\n    }).catch(error => {\n      console.error(error);\n    });\n  },\n  fetchProduct({\n    commit\n  }, productId) {\n    return axiosInstance.get(`/products/${productId}`).then(response => {\n      commit(\"SET_PRODUCT\", response.data.product);\n      history.replaceState({}, \"\", response.data.product.title.replaceAll(\" \", \"-\"));\n    }).catch(error => {\n      console.error(error);\n    });\n  }\n};\nconst getters = {\n  totalPercentage(state) {\n    const totalProducts = state.products.length;\n    // console.log(state.products.products.length)\n    return totalProducts / 100;\n    //return ((totalProducts / 100) ).toFixed(0);\n  },\n\n  getProductsByUser(state) {\n    return state.getProductsByUser;\n  },\n  getHighestSellingProducts(state) {\n    return state.highestSellingProduct;\n  },\n  getProduct(state) {\n    return state.product;\n  },\n  getProducts(state) {\n    return state.products;\n  },\n  getSortedProducts(state) {\n    return state.sortedProducts;\n  },\n  getLikedProducts(state) {\n    return state.likedProducts;\n  },\n  sortedProductsWithHighestSelling(state, getters) {\n    const sortedProducts = getters.getSortedProducts;\n    const highestSellingProducts = getters.getHighestSellingProducts;\n\n    // Merge the sorted products and highest-selling products\n    const mergedProducts = sortedProducts.map(product => {\n      const highestSellingProduct = highestSellingProducts.find(item => item.productID === product._id);\n      return {\n        ...product,\n        sales: highestSellingProduct ? highestSellingProduct.sales : 0\n      };\n    });\n    return mergedProducts;\n  }\n};\nexport default {\n  state,\n  mutations,\n  actions,\n  getters\n};","map":{"version":3,"names":["axiosInstance","state","products","product","sortedProducts","likedProducts","highestSellingProduct","getProductsByUser","mutations","SET_HIGHEST_SELLING_PRODUCT","SET_PRODUCTS_BY_USER","SET_PRODUCTS","SET_PRODUCT","SET_SORTED_PRODUCTS","SET_LIKED_PRODUCTS","INCREMENT_LIKES","likes","actions","createProduct","commit","formData","response","post","data","error","fetchHighestSellingProducts","get","then","highestSellingProducts","catch","console","fetchProducts","fetchProductsByUser","fetchSortedProducts","sort","a","b","views","log","fetchLikedProducts","likeProducts","productId","incrementViews","fetchProduct","history","replaceState","title","replaceAll","getters","totalPercentage","totalProducts","length","getHighestSellingProducts","getProduct","getProducts","getSortedProducts","getLikedProducts","sortedProductsWithHighestSelling","mergedProducts","map","find","item","productID","_id","sales"],"sources":["C:/Users/ajib/OneDrive/Desktop/event-ticket/event-ticket-frontend/src/store/modules/products.js"],"sourcesContent":["import axiosInstance from \"../../helpers/axiosInstance\";\r\nconst state = {\r\n    products: [],\r\n    product: [],\r\n    sortedProducts: [],\r\n    likedProducts: [],\r\n    highestSellingProduct: null,\r\n    getProductsByUser: [],\r\n\r\n\r\n};\r\nconst mutations = {\r\n    SET_HIGHEST_SELLING_PRODUCT(state, products) {\r\n        state.highestSellingProduct = products;\r\n    },\r\n    SET_PRODUCTS_BY_USER(state, products) {\r\n        state.getProductsByUser = products;\r\n    },\r\n    SET_PRODUCTS(state, products) {\r\n        state.products = products;\r\n    },\r\n    SET_PRODUCT(state, product) {\r\n        state.product = product;\r\n    },\r\n    SET_SORTED_PRODUCTS(state, sortedProducts) {\r\n        state.sortedProducts = sortedProducts;\r\n    },\r\n    SET_LIKED_PRODUCTS(state, likedProducts) {\r\n        state.likedProducts = likedProducts;\r\n    },\r\n    INCREMENT_LIKES(state) {\r\n        if (state.products) {\r\n            state.products.likes++;\r\n        }\r\n    },\r\n\r\n};\r\nconst actions = {\r\n    async createProduct({ commit }, formData) {\r\n        try {\r\n          const response = await axiosInstance.post('/products', formData);\r\n          // Handle successful response if needed\r\n          return response.data;\r\n        } catch (error) {\r\n          // Handle error if needed\r\n          throw error;\r\n        }\r\n      },\r\n    fetchHighestSellingProducts({\r\n        commit\r\n    }) {\r\n        return axiosInstance\r\n            .get('/highest-selling-product')\r\n            .then((response) => {\r\n                const products = response.data.highestSellingProducts;\r\n                commit('SET_HIGHEST_SELLING_PRODUCT', products);\r\n            })\r\n            .catch((error) => {\r\n                console.error(error);\r\n            });\r\n    },\r\n\r\n    fetchProducts({\r\n        commit\r\n    }) {\r\n        return axiosInstance\r\n            .get('/products')\r\n            .then((response) => {\r\n                commit('SET_PRODUCTS', response.data.products);\r\n\r\n            })\r\n            .catch((error) => {\r\n                console.error(error);\r\n            });\r\n    },\r\n     fetchProductsByUser({\r\n        commit\r\n    }) {\r\n        return axiosInstance\r\n            .get('/user/products')\r\n            .then((response) => {\r\n                commit('SET_PRODUCTS', response.data.products);\r\n\r\n            })\r\n            .catch((error) => {\r\n                console.error(error);\r\n            });\r\n    },\r\n    fetchSortedProducts({\r\n        commit\r\n    }) {\r\n        return axiosInstance\r\n            .get(\"/products\")\r\n            .then((response) => {\r\n                const products = response.data.products;\r\n                const sortedProducts = products.sort((a, b) => b.views - a.views);\r\n\r\n                commit(\"SET_SORTED_PRODUCTS\", sortedProducts);\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n    },\r\n    fetchLikedProducts({\r\n        commit\r\n    }) {\r\n        return axiosInstance\r\n            .get(\"/products\")\r\n            .then((response) => {\r\n                const products = response.data.products;\r\n                const likedProducts = products.sort((a, b) => b.likes - a.likes);\r\n\r\n                commit(\"SET_LIKED_PRODUCTS\", likedProducts);\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n    },\r\n\r\n\r\n    likeProducts({\r\n        commit\r\n    }, productId) {\r\n        return axiosInstance\r\n            .post(`/products/${productId}/like`)\r\n            .then(response => {\r\n            //    console.log(response)\r\n               commit('INCREMENT_LIKES');\r\n               const products = response.data.likes;\r\n                // Handle the response if needed\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n    },\r\n\r\n    incrementViews({\r\n        commit\r\n    }, productId) {\r\n        return axiosInstance\r\n            .post(`/products/${productId}/views`)\r\n            .then(response => {\r\n                // Handle the response if needed\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n    },\r\n    fetchProduct({\r\n        commit\r\n    }, productId) {\r\n        return axiosInstance\r\n            .get(`/products/${productId}`)\r\n            .then(response => {\r\n                commit(\"SET_PRODUCT\", response.data.product);\r\n                history.replaceState({}, \"\", response.data.product.title.replaceAll(\" \", \"-\"));\r\n\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n    }\r\n};\r\nconst getters = {\r\n    totalPercentage(state) {\r\n        const totalProducts = state.products.length;\r\n        // console.log(state.products.products.length)\r\n        return ((totalProducts / 100));\r\n        //return ((totalProducts / 100) ).toFixed(0);\r\n    },\r\n    getProductsByUser(state) {\r\n        return state.getProductsByUser;\r\n    },\r\n    getHighestSellingProducts(state) {\r\n        return state.highestSellingProduct;\r\n    },\r\n    getProduct(state) {\r\n        return state.product;\r\n    },\r\n\r\n    getProducts(state) {\r\n        return state.products;\r\n    },\r\n    getSortedProducts(state) {\r\n        return state.sortedProducts;\r\n    },\r\n    getLikedProducts(state) {\r\n        return state.likedProducts;\r\n    },\r\n    sortedProductsWithHighestSelling(state, getters) {\r\n        const sortedProducts = getters.getSortedProducts;\r\n        const highestSellingProducts = getters.getHighestSellingProducts;\r\n\r\n        // Merge the sorted products and highest-selling products\r\n        const mergedProducts = sortedProducts.map((product) => {\r\n          const highestSellingProduct = highestSellingProducts.find(\r\n            (item) => item.productID === product._id\r\n          );\r\n\r\n          return {\r\n            ...product,\r\n            sales: highestSellingProduct ? highestSellingProduct.sales : 0\r\n          };\r\n        });\r\n\r\n        return mergedProducts;\r\n      }\r\n\r\n\r\n};\r\n\r\n\r\n\r\nexport default {\r\n\r\n    state,\r\n    mutations,\r\n    actions,\r\n    getters\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}