{"ast":null,"code":"import { mapGetters } from \"vuex\";\nimport VueApexCharts from \"vue3-apexcharts\";\nexport default {\n  components: {\n    apexchart: VueApexCharts\n  },\n  computed: {\n    ...mapGetters([\"getVisits\"])\n  },\n  data() {\n    return {\n      filter: \"monthly\",\n      options: {},\n      series: []\n    };\n  },\n  mounted() {\n    this.$store.dispatch(\"fetchVisits\").then(response => {\n      // console.log(response);\n      this.generateChart();\n    }).catch(error => {\n      // console.log(error);\n    });\n  },\n  methods: {\n    generateChart() {\n      const visits = this.filterVisits();\n      const countsMap = new Map();\n\n      // Group counts by date and sum them\n      visits.forEach(visit => {\n        const date = visit.time.slice(0, 10);\n        const count = visit.count;\n        if (countsMap.has(date)) {\n          countsMap.set(date, countsMap.get(date) + count);\n        } else {\n          countsMap.set(date, count);\n        }\n      });\n\n      // Sort dates in ascending order\n      const sortedDates = Array.from(countsMap.keys()).sort();\n      const dates = sortedDates.map(date => date.slice(5)); // Extract month and day\n      const counts = sortedDates.map(date => countsMap.get(date));\n      this.options = {\n        chart: {\n          type: \"bar\"\n        },\n        series: [{\n          name: \"Total Visits\",\n          data: counts.map(count => Math.floor(count))\n        }],\n        xaxis: {\n          categories: dates\n        }\n      };\n    },\n    filterVisits() {\n      const today = new Date();\n      const weekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);\n      const monthAgo = new Date(today.getFullYear(), today.getMonth() - 1, today.getDate());\n      if (this.filter === \"daily\") {\n        return this.getVisits.filter(visit => {\n          const visitDate = new Date(visit.time);\n          return visitDate.toDateString() === today.toDateString();\n        });\n      } else if (this.filter === \"weekly\") {\n        return this.getVisits.filter(visit => {\n          const visitDate = new Date(visit.time);\n          return visitDate >= weekAgo && visitDate <= today;\n        });\n      } else if (this.filter === \"monthly\") {\n        return this.getVisits.filter(visit => {\n          const visitDate = new Date(visit.time);\n          return visitDate >= monthAgo && visitDate <= today;\n        });\n      }\n      return [];\n    },\n    setFilter(filter) {\n      this.filter = filter;\n      this.generateChart();\n    }\n  }\n};","map":{"version":3,"names":["mapGetters","VueApexCharts","components","apexchart","computed","data","filter","options","series","mounted","$store","dispatch","then","response","generateChart","catch","error","methods","visits","filterVisits","countsMap","Map","forEach","visit","date","time","slice","count","has","set","get","sortedDates","Array","from","keys","sort","dates","map","counts","chart","type","name","Math","floor","xaxis","categories","today","Date","weekAgo","getTime","monthAgo","getFullYear","getMonth","getDate","getVisits","visitDate","toDateString","setFilter"],"sources":["C:\\Users\\ajib\\OneDrive\\Desktop\\event-ticket\\vue3-restaurant-dashboard\\src\\components\\charts\\barChart.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div\r\n      id=\"user-activity\"\r\n      class=\"\"\r\n    >\r\n      <div class=\" border-0 pb-0 d-sm-flex d-block\" style=\"background-color:#e7faec;\">\r\n        <div>\r\n          <h4 class=\"card-title mb-1\">Customer Map</h4>\r\n          <small class=\"mb-0\">Lorem Ipsum is simply dummy text of the printing</small>\r\n        </div>\r\n        <div class=\"card-action card-tabs mt-3 mt-sm-0\">\r\n          <ul\r\n            class=\"nav nav-tabs\"\r\n            role=\"tablist\"\r\n          >\r\n            <li class=\"nav-item\">\r\n              <a\r\n                class=\"nav-link active\"\r\n                data-toggle=\"tab\"\r\n                @click=\"setFilter('monthly')\"\r\n                role=\"tab\"\r\n              >\r\n                Monthly\r\n              </a>\r\n            </li>\r\n            <li class=\"nav-item\">\r\n              <a\r\n                class=\"nav-link\"\r\n                data-toggle=\"tab\"\r\n                @click=\"setFilter('weekly')\"\r\n                role=\"tab\"\r\n              >\r\n                Weekly\r\n              </a>\r\n            </li>\r\n            <li class=\"nav-item\">\r\n              <a\r\n                class=\"nav-link\"\r\n                data-toggle=\"tab\"\r\n                @click=\"setFilter('daily')\"\r\n                role=\"tab\"\r\n              >\r\n                Today\r\n              </a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <div\r\n          class=\"tab-content\"\r\n          id=\"myTabContent\"\r\n        >\r\n          <div\r\n            class=\"tab-pane fade show active\"\r\n            id=\"user\"\r\n            role=\"tabpanel\"\r\n          >\r\n            <div\r\n              id=\"charts\"\r\n              class=\"chart-container\"\r\n            >\r\n              <apexchart\r\n                type=\"bar\"\r\n                :options=\"options\"\r\n                :series=\"series\"\r\n              ></apexchart>\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n</template>\r\n<script>\r\nimport { mapGetters } from \"vuex\";\r\nimport VueApexCharts from \"vue3-apexcharts\";\r\n\r\nexport default {\r\n  components: {\r\n    apexchart: VueApexCharts\r\n  },\r\n  computed: {\r\n    ...mapGetters([\"getVisits\"])\r\n  },\r\n  data() {\r\n    return {\r\n      filter: \"monthly\",\r\n      options: {},\r\n      series: []\r\n    };\r\n  },\r\n  mounted() {\r\n    this.$store\r\n      .dispatch(\"fetchVisits\")\r\n      .then(response => {\r\n       // console.log(response);\r\n        this.generateChart();\r\n      })\r\n      .catch(error => {\r\n       // console.log(error);\r\n      });\r\n  },\r\n  methods: {\r\n    generateChart() {\r\n      const visits = this.filterVisits();\r\n      const countsMap = new Map();\r\n\r\n      // Group counts by date and sum them\r\n      visits.forEach(visit => {\r\n        const date = visit.time.slice(0, 10);\r\n        const count = visit.count;\r\n\r\n        if (countsMap.has(date)) {\r\n          countsMap.set(date, countsMap.get(date) + count);\r\n        } else {\r\n          countsMap.set(date, count);\r\n        }\r\n      });\r\n\r\n      // Sort dates in ascending order\r\n      const sortedDates = Array.from(countsMap.keys()).sort();\r\n\r\n      const dates = sortedDates.map(date => date.slice(5)); // Extract month and day\r\n      const counts = sortedDates.map(date => countsMap.get(date));\r\n\r\n      this.options = {\r\n        chart: {\r\n          type: \"bar\"\r\n        },\r\n        series: [\r\n          {\r\n            name: \"Total Visits\",\r\n            data: counts.map(count => Math.floor(count))\r\n          }\r\n        ],\r\n        xaxis: {\r\n          categories: dates\r\n        }\r\n      };\r\n    },\r\n    filterVisits() {\r\n      const today = new Date();\r\n      const weekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);\r\n      const monthAgo = new Date(\r\n        today.getFullYear(),\r\n        today.getMonth() - 1,\r\n        today.getDate()\r\n      );\r\n\r\n      if (this.filter === \"daily\") {\r\n        return this.getVisits.filter(visit => {\r\n          const visitDate = new Date(visit.time);\r\n          return visitDate.toDateString() === today.toDateString();\r\n        });\r\n      } else if (this.filter === \"weekly\") {\r\n        return this.getVisits.filter(visit => {\r\n          const visitDate = new Date(visit.time);\r\n          return visitDate >= weekAgo && visitDate <= today;\r\n        });\r\n      } else if (this.filter === \"monthly\") {\r\n        return this.getVisits.filter(visit => {\r\n          const visitDate = new Date(visit.time);\r\n          return visitDate >= monthAgo && visitDate <= today;\r\n        });\r\n      }\r\n\r\n      return [];\r\n    },\r\n    setFilter(filter) {\r\n      this.filter = filter;\r\n      this.generateChart();\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n#charts {\r\n  max-width: 1000px;\r\n  margin: 0 auto;\r\n}\r\n.chart-container {\r\n  margin-bottom: 0; /* Remove bottom margin */\r\n  padding-bottom: 1rem; /* Add some bottom padding */\r\n}\r\n\r\n@media (max-width: 576px) {\r\n  /* Apply specific styles for small screens (e.g., mobile devices) */\r\n  .chart-container {\r\n    padding-bottom: 0.5rem; /* Adjust the padding as needed */\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}