{"ast":null,"code":"// store/index.js\n\nimport axiosInstance from \"../../helpers/axiosInstance\";\nconst state = {\n  orders: []\n};\nconst mutations = {\n  SET_ORDERS(state, orders) {\n    state.orders = orders;\n  }\n};\nconst actions = {\n  updateOrderStatus({\n    commit\n  }, {\n    orderId,\n    status\n  }) {\n    return new Promise((resolve, reject) => {\n      axiosInstance.put(`/order/${orderId}/update-status`, {\n        status\n      }).then(response => {\n        const order = response.data.order;\n        // Handle the updated order data as needed\n        // For example, commit a mutation to update the order state in the store\n        // commit('UPDATE_ORDER', order);\n\n        resolve();\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  },\n  fetchOrders({\n    commit\n  }) {\n    return axiosInstance.get('/orders').then(response => {\n      commit('SET_ORDERS', response.data.products);\n    }).catch(error => {\n      console.error(error);\n    });\n  }\n};\nconst getters = {\n  getOrders(state) {\n    return state.orders;\n  },\n  getOrdersLength: state => state.orders.length,\n  deliveredCount(state) {\n    return state.orders.filter(order => order.status === \"delivered\").length;\n  },\n  cancelledCount(state) {\n    return state.orders.filter(order => order.status === \"cancelled\").length;\n  },\n  onDeliveryCount(state) {\n    return state.orders.filter(order => order.status === \"on Delivery\").length;\n  },\n  totalPercent(state) {\n    const totalOrders = state.orders.length;\n    // console.log(state.products.products.length)\n    return totalOrders / 100;\n  },\n  totalOrdersPrice: state => {\n    let total = 0;\n    state.orders.forEach(order => {\n      if (Array.isArray(order.products)) {\n        order.products.forEach(product => {\n          total += product.totalPrice || 0;\n        });\n      }\n    });\n    return total;\n  },\n  totalOrdersPercentage: (state, getters) => {\n    const totalOrders = getters.totalOrdersPrice;\n    //const totalSales = getters.totalSales;\n    return totalOrders / 100;\n  }\n};\nexport default {\n  state,\n  mutations,\n  actions,\n  getters\n};","map":{"version":3,"names":["axiosInstance","state","orders","mutations","SET_ORDERS","actions","updateOrderStatus","commit","orderId","status","Promise","resolve","reject","put","then","response","order","data","catch","error","fetchOrders","get","products","console","getters","getOrders","getOrdersLength","length","deliveredCount","filter","cancelledCount","onDeliveryCount","totalPercent","totalOrders","totalOrdersPrice","total","forEach","Array","isArray","product","totalPrice","totalOrdersPercentage"],"sources":["C:/Users/ajib/OneDrive/Desktop/event-ticket/event-ticket-frontend/src/store/modules/orders.js"],"sourcesContent":["// store/index.js\r\n\r\n\r\n\r\nimport axiosInstance from \"../../helpers/axiosInstance\";\r\n\r\n\r\nconst state = {\r\n    orders: [],\r\n\r\n};\r\nconst mutations = {\r\n\r\n    SET_ORDERS(state, orders) {\r\n        state.orders = orders;\r\n    },\r\n};\r\nconst actions = {\r\n    updateOrderStatus({ commit }, { orderId, status }) {\r\n        return new Promise((resolve, reject) => {\r\n          axiosInstance.put(`/order/${orderId}/update-status`, { status })\r\n            .then(response => {\r\n              const order = response.data.order;\r\n              // Handle the updated order data as needed\r\n              // For example, commit a mutation to update the order state in the store\r\n              // commit('UPDATE_ORDER', order);\r\n\r\n              resolve();\r\n            })\r\n            .catch(error => {\r\n              reject(error);\r\n            });\r\n        });\r\n      },\r\n\r\n    fetchOrders({\r\n        commit\r\n    }) {\r\n        return axiosInstance\r\n            .get('/orders')\r\n            .then((response) => {\r\n                commit('SET_ORDERS', response.data.products);\r\n            })\r\n            .catch((error) => {\r\n                console.error(error);\r\n            });\r\n    },\r\n};\r\nconst getters = {\r\n    getOrders(state) {\r\n        return state.orders;\r\n    },\r\n    getOrdersLength: state => state.orders.length,\r\n    deliveredCount(state) {\r\n        return state.orders.filter(order => order.status === \"delivered\").length\r\n    },\r\n    cancelledCount(state) {\r\n        return state.orders.filter(order => order.status === \"cancelled\").length\r\n    },\r\n    onDeliveryCount(state) {\r\n        return state.orders.filter(order => order.status === \"on Delivery\").length\r\n    },\r\n\r\n    totalPercent(state) {\r\n        const totalOrders = state.orders.length;\r\n        // console.log(state.products.products.length)\r\n        return ((totalOrders / 100));\r\n\r\n    },\r\n totalOrdersPrice: (state) => {\r\n    let total = 0;\r\n    state.orders.forEach((order) => {\r\n        if (Array.isArray(order.products)) {\r\n            order.products.forEach((product) => {\r\n                total += product.totalPrice || 0;\r\n            });\r\n        }\r\n    });\r\n    return total;\r\n},\r\n\r\n\r\n    totalOrdersPercentage: (state, getters) => {\r\n        const totalOrders = getters.totalOrdersPrice;\r\n        //const totalSales = getters.totalSales;\r\n        return totalOrders / 100;\r\n    },\r\n\r\n};\r\n\r\n\r\nexport default {\r\n\r\n    state,\r\n    mutations,\r\n    actions,\r\n    getters\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}