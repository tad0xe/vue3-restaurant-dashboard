{"ast":null,"code":"import { QrcodeStream } from 'vue-qrcode-reader';\nimport axios from 'axios';\nexport default {\n  name: 'QRScanner',\n  components: {\n    QrcodeStream\n  },\n  data() {\n    return {\n      result: '',\n      ticket: null,\n      error: '',\n      notFound: false\n    };\n  },\n  methods: {\n    async onDetect(detectedCodes) {\n      const reference = detectedCodes[0]?.rawValue;\n      this.result = reference;\n      this.ticket = null;\n      this.notFound = false;\n      try {\n        const res = await axios.get(`https://event-ticket-qa70.onrender.com/api/order/${reference}`);\n        this.ticket = res.data.order;\n      } catch (err) {\n        if (err.response && err.response.status === 404) {\n          this.notFound = true;\n        } else {\n          this.error = 'Server error. Please try again.';\n        }\n        console.error(err);\n      }\n    },\n    onError(err) {\n      console.error(err);\n      this.error = 'Camera access or scanning failed.';\n    }\n  }\n};","map":{"version":3,"names":["QrcodeStream","axios","name","components","data","result","ticket","error","notFound","methods","onDetect","detectedCodes","reference","rawValue","res","get","order","err","response","status","console","onError"],"sources":["C:\\Users\\ajib\\OneDrive\\Desktop\\event-ticket\\event-ticket-frontend\\src\\components\\app\\admin\\scanner.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <h2>üéØ Scan Ticket QR Code</h2>\r\n\r\n  \r\n    <qrcode-stream\r\n      :constraints=\"{ facingMode: 'environment' }\"\r\n      @detect=\"onDetect\"\r\n      @error=\"onError\"\r\n    />\r\n\r\n    <p v-if=\"error\" class=\"error\">{{ error }}</p>\r\n      <p class=\"decode-result\">\r\n      Result: <b>{{ result }}</b>\r\n    </p>\r\n\r\n<div v-if=\"ticket\" class=\"text-start\" style=\"border: 1px solid #ccc; padding: 16px; border-radius: 8px; background: #f9f9f9; max-width: 600px;\">\r\n  <h4 style=\"margin-bottom: 12px;\">üéüÔ∏è Ticket Details</h4>\r\n\r\n  <div style=\"padding: 8px 0; border-top: 1px solid #ddd;\">\r\n    <strong>Event:</strong>\r\n    <div>{{ ticket.title }}</div>\r\n  </div>\r\n\r\n  <div style=\"padding: 8px 0; border-top: 1px solid #ddd;\">\r\n    <strong>Reference:</strong>\r\n    <div>{{ ticket.reference }}</div>\r\n  </div>\r\n\r\n  <div style=\"padding: 8px 0; border-top: 1px solid #ddd;\">\r\n    <strong>Email:</strong>\r\n    <div>{{ ticket.contact?.email || 'N/A' }}</div>\r\n  </div>\r\n\r\n  <div style=\"padding: 8px 0; border-top: 1px solid #ddd;\">\r\n    <strong>Phone:</strong>\r\n    <div>{{ ticket.contact?.phone || 'N/A' }}</div>\r\n  </div>\r\n\r\n  <div style=\"padding: 8px 0; border-top: 1px solid #ddd;\">\r\n    <strong>Tickets:</strong>\r\n    <ul style=\"margin-top: 4px; padding-left: 20px;\">\r\n      <li v-for=\"t in ticket.tickets\" :key=\"t._id\">\r\n        {{ t.name }} x {{ t.quantity }}\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</div>\r\n\r\n\r\n    <div v-if=\"notFound\">\r\n      <p class=\"text-danger\">‚ùå Ticket not found.</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { QrcodeStream } from 'vue-qrcode-reader'\r\nimport axios from 'axios'\r\n\r\nexport default {\r\n  name: 'QRScanner',\r\n  components: {\r\n    QrcodeStream\r\n  },\r\n  data() {\r\n    return {\r\n      result: '',\r\n      ticket: null,\r\n      error: '',\r\n      notFound: false\r\n    }\r\n  },\r\n  methods: {\r\n    async onDetect(detectedCodes) {\r\n      const reference = detectedCodes[0]?.rawValue\r\n      this.result = reference\r\n      this.ticket = null\r\n      this.notFound = false\r\n\r\n      try {\r\n        const res = await axios.get(`https://event-ticket-qa70.onrender.com/api/order/${reference}`)\r\n        this.ticket = res.data.order\r\n      } catch (err) {\r\n        if (err.response && err.response.status === 404) {\r\n          this.notFound = true\r\n        } else {\r\n          this.error = 'Server error. Please try again.'\r\n        }\r\n        console.error(err)\r\n      }\r\n    },\r\n    onError(err) {\r\n      console.error(err)\r\n      this.error = 'Camera access or scanning failed.'\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.container {\r\n  max-width: 600px;\r\n  margin: 2rem auto;\r\n  text-align: center;\r\n}\r\n.decode-result {\r\n  margin-top: 1rem;\r\n  font-size: 1.2rem;\r\n}\r\n.error {\r\n  color: red;\r\n}\r\n</style>\r\n"],"mappings":"AAyDA,SAASA,YAAW,QAAS,mBAAkB;AAC/C,OAAOC,KAAI,MAAO,OAAM;AAExB,eAAe;EACbC,IAAI,EAAE,WAAW;EACjBC,UAAU,EAAE;IACVH;EACF,CAAC;EACDI,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,MAAM,EAAE,EAAE;MACVC,MAAM,EAAE,IAAI;MACZC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,QAAQA,CAACC,aAAa,EAAE;MAC5B,MAAMC,SAAQ,GAAID,aAAa,CAAC,CAAC,CAAC,EAAEE,QAAO;MAC3C,IAAI,CAACR,MAAK,GAAIO,SAAQ;MACtB,IAAI,CAACN,MAAK,GAAI,IAAG;MACjB,IAAI,CAACE,QAAO,GAAI,KAAI;MAEpB,IAAI;QACF,MAAMM,GAAE,GAAI,MAAMb,KAAK,CAACc,GAAG,CAAE,oDAAmDH,SAAU,EAAC;QAC3F,IAAI,CAACN,MAAK,GAAIQ,GAAG,CAACV,IAAI,CAACY,KAAI;MAC7B,EAAE,OAAOC,GAAG,EAAE;QACZ,IAAIA,GAAG,CAACC,QAAO,IAAKD,GAAG,CAACC,QAAQ,CAACC,MAAK,KAAM,GAAG,EAAE;UAC/C,IAAI,CAACX,QAAO,GAAI,IAAG;QACrB,OAAO;UACL,IAAI,CAACD,KAAI,GAAI,iCAAgC;QAC/C;QACAa,OAAO,CAACb,KAAK,CAACU,GAAG;MACnB;IACF,CAAC;IACDI,OAAOA,CAACJ,GAAG,EAAE;MACXG,OAAO,CAACb,KAAK,CAACU,GAAG;MACjB,IAAI,CAACV,KAAI,GAAI,mCAAkC;IACjD;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}