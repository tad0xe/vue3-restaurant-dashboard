{"ast":null,"code":"// store/index.js\n\nimport axiosInstance from \"../../helpers/axiosInstance\";\nconst state = {\n  orders: [],\n  ordersByUser: []\n};\nconst mutations = {\n  SET_ORDERS(state, orders) {\n    state.orders = orders;\n  },\n  SET_ORDERS_BY_USER(state, orders) {\n    state.getOrdersByUser = orders;\n  }\n};\nconst actions = {\n  updateOrderStatus({\n    commit\n  }, {\n    orderId,\n    status\n  }) {\n    return new Promise((resolve, reject) => {\n      axiosInstance.put(`/order/${orderId}/update-status`, {\n        status\n      }).then(response => {\n        const order = response.data.order;\n        // Handle the updated order data as needed\n        // For example, commit a mutation to update the order state in the store\n        // commit('UPDATE_ORDER', order);\n\n        resolve();\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  },\n  fetchOrdersByUser({\n    commit\n  }) {\n    return axiosInstance.get(\"/user/orders\").then(response => {\n      commit(\"SET_ORDERS_BY_USER\", response.data.products);\n    }).catch(error => {\n      console.error(error);\n    });\n  },\n  fetchOrders({\n    commit\n  }) {\n    return axiosInstance.get(\"/orders\").then(response => {\n      commit(\"SET_ORDERS\", response.data.products);\n    }).catch(error => {\n      console.error(error);\n    });\n  }\n};\nconst getters = {\n  getOrders(state) {\n    return state.orders;\n  },\n  getOrdersByUser(state) {\n    return state.ordersByUser;\n  },\n  getOrdersLength: state => state.orders.length,\n  deliveredCount(state) {\n    return state.orders.filter(order => order.status === \"delivered\").length;\n  },\n  cancelledCount(state) {\n    return state.orders.filter(order => order.status === \"cancelled\").length;\n  },\n  onDeliveryCount(state) {\n    return state.orders.filter(order => order.status === \"on Delivery\").length;\n  },\n  totalPercent(state) {\n    const totalOrders = state.orders.length;\n    // console.log(state.products.products.length)\n    return totalOrders / 100;\n  },\n  totalOrdersPrice: state => {\n    let total = 0;\n    state.orders.forEach(order => {\n      if (Array.isArray(order.products)) {\n        order.products.forEach(product => {\n          total += product.totalPrice || 0;\n        });\n      }\n    });\n    return total;\n  },\n  totalOrdersPercentage: (state, getters) => {\n    const totalOrders = getters.totalOrdersPrice;\n    //const totalSales = getters.totalSales;\n    return totalOrders / 100;\n  }\n};\nexport default {\n  state,\n  mutations,\n  actions,\n  getters\n};","map":{"version":3,"names":["axiosInstance","state","orders","ordersByUser","mutations","SET_ORDERS","SET_ORDERS_BY_USER","getOrdersByUser","actions","updateOrderStatus","commit","orderId","status","Promise","resolve","reject","put","then","response","order","data","catch","error","fetchOrdersByUser","get","products","console","fetchOrders","getters","getOrders","getOrdersLength","length","deliveredCount","filter","cancelledCount","onDeliveryCount","totalPercent","totalOrders","totalOrdersPrice","total","forEach","Array","isArray","product","totalPrice","totalOrdersPercentage"],"sources":["C:/Users/ajib/OneDrive/Desktop/event-ticket/event-ticket-frontend/src/store/modules/orders.js"],"sourcesContent":["// store/index.js\r\n\r\nimport axiosInstance from \"../../helpers/axiosInstance\";\r\n\r\nconst state = {\r\n  orders: [],\r\n    ordersByUser: [],\r\n};\r\nconst mutations = {\r\n  SET_ORDERS(state, orders) {\r\n    state.orders = orders;\r\n  },\r\n  SET_ORDERS_BY_USER(state, orders) {\r\n    state.getOrdersByUser = orders;\r\n  },\r\n};\r\nconst actions = {\r\n  updateOrderStatus({ commit }, { orderId, status }) {\r\n    return new Promise((resolve, reject) => {\r\n      axiosInstance\r\n        .put(`/order/${orderId}/update-status`, { status })\r\n        .then((response) => {\r\n          const order = response.data.order;\r\n          // Handle the updated order data as needed\r\n          // For example, commit a mutation to update the order state in the store\r\n          // commit('UPDATE_ORDER', order);\r\n\r\n          resolve();\r\n        })\r\n        .catch((error) => {\r\n          reject(error);\r\n        });\r\n    });\r\n  },\r\n  fetchOrdersByUser({ commit }) {\r\n    return axiosInstance\r\n      .get(\"/user/orders\")\r\n      .then((response) => {\r\n        commit(\"SET_ORDERS_BY_USER\", response.data.products);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  },\r\n  fetchOrders({ commit }) {\r\n    return axiosInstance\r\n      .get(\"/orders\")\r\n      .then((response) => {\r\n        commit(\"SET_ORDERS\", response.data.products);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  },\r\n};\r\nconst getters = {\r\n  getOrders(state) {\r\n    return state.orders;\r\n  },\r\n    getOrdersByUser(state) {    \r\n    return state.ordersByUser;\r\n    },\r\n  getOrdersLength: (state) => state.orders.length,\r\n  deliveredCount(state) {\r\n    return state.orders.filter((order) => order.status === \"delivered\").length;\r\n  },\r\n  cancelledCount(state) {\r\n    return state.orders.filter((order) => order.status === \"cancelled\").length;\r\n  },\r\n  onDeliveryCount(state) {\r\n    return state.orders.filter((order) => order.status === \"on Delivery\")\r\n      .length;\r\n  },\r\n\r\n  totalPercent(state) {\r\n    const totalOrders = state.orders.length;\r\n    // console.log(state.products.products.length)\r\n    return totalOrders / 100;\r\n  },\r\n  totalOrdersPrice: (state) => {\r\n    let total = 0;\r\n    state.orders.forEach((order) => {\r\n      if (Array.isArray(order.products)) {\r\n        order.products.forEach((product) => {\r\n          total += product.totalPrice || 0;\r\n        });\r\n      }\r\n    });\r\n    return total;\r\n  },\r\n\r\n  totalOrdersPercentage: (state, getters) => {\r\n    const totalOrders = getters.totalOrdersPrice;\r\n    //const totalSales = getters.totalSales;\r\n    return totalOrders / 100;\r\n  },\r\n};\r\n\r\nexport default {\r\n  state,\r\n  mutations,\r\n  actions,\r\n  getters,\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}