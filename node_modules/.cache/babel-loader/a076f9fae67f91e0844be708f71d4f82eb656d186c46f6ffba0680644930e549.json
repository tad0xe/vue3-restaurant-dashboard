{"ast":null,"code":"import { QrcodeStream } from \"vue-qrcode-reader\";\nimport axios from \"axios\";\nexport default {\n  components: {\n    QrcodeStream\n  },\n  data() {\n    return {\n      orderData: null\n    };\n  },\n  methods: {\n    async onDecode(reference) {\n      console.log(\"Scanned reference:\", reference);\n      try {\n        const res = await axios.get(`http://localhost:4000/api/order/${reference}`);\n        this.orderData = res.data.order;\n      } catch (err) {\n        console.error(\"Failed to fetch order:\", err);\n        alert(\"Order not found or server error.\");\n      }\n    },\n    onInit(promise) {\n      promise.then(() => console.log(\"Camera initialized\")).catch(err => console.error(\"Camera init error:\", err));\n    }\n  }\n};","map":{"version":3,"names":["QrcodeStream","axios","components","data","orderData","methods","onDecode","reference","console","log","res","get","order","err","error","alert","onInit","promise","then","catch"],"sources":["C:\\Users\\ajib\\OneDrive\\Desktop\\event-ticket\\event-ticket-frontend\\src\\components\\rex.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <qrcode-stream @decode=\"onDecode\" @init=\"onInit\" />\r\n\r\n    <div v-if=\"orderData\">\r\n      <h3>ðŸŽŸ Order Details</h3>\r\n      <p><strong>Title:</strong> {{ orderData.title }}</p>\r\n      <p><strong>Email:</strong> {{ orderData.contact.email }}</p>\r\n      <p><strong>Phone:</strong> {{ orderData.contact.phone }}</p>\r\n      <p><strong>Price:</strong> {{ orderData.price }}</p>\r\n      <p><strong>Tickets:</strong></p>\r\n      <ul>\r\n        <li v-for=\"ticket in orderData.tickets\" :key=\"ticket.name\">\r\n          {{ ticket.name }} - {{ ticket.quantity }}\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { QrcodeStream } from \"vue-qrcode-reader\";\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  components: {\r\n    QrcodeStream,\r\n  },\r\n  data() {\r\n    return {\r\n      orderData: null,\r\n    };\r\n  },\r\n  methods: {\r\n    async onDecode(reference) {\r\n      console.log(\"Scanned reference:\", reference);\r\n\r\n      try {\r\n        const res = await axios.get(`http://localhost:4000/api/order/${reference}`);\r\n        this.orderData = res.data.order;\r\n      } catch (err) {\r\n        console.error(\"Failed to fetch order:\", err);\r\n        alert(\"Order not found or server error.\");\r\n      }\r\n    },\r\n    onInit(promise) {\r\n      promise\r\n        .then(() => console.log(\"Camera initialized\"))\r\n        .catch((err) => console.error(\"Camera init error:\", err));\r\n    },\r\n  },\r\n};\r\n</script>\r\n"],"mappings":"AAqBA,SAASA,YAAW,QAAS,mBAAmB;AAChD,OAAOC,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,UAAU,EAAE;IACVF;EACF,CAAC;EACDG,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,SAAS,EAAE;IACb,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,QAAQA,CAACC,SAAS,EAAE;MACxBC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEF,SAAS,CAAC;MAE5C,IAAI;QACF,MAAMG,GAAE,GAAI,MAAMT,KAAK,CAACU,GAAG,CAAE,mCAAkCJ,SAAU,EAAC,CAAC;QAC3E,IAAI,CAACH,SAAQ,GAAIM,GAAG,CAACP,IAAI,CAACS,KAAK;MACjC,EAAE,OAAOC,GAAG,EAAE;QACZL,OAAO,CAACM,KAAK,CAAC,wBAAwB,EAAED,GAAG,CAAC;QAC5CE,KAAK,CAAC,kCAAkC,CAAC;MAC3C;IACF,CAAC;IACDC,MAAMA,CAACC,OAAO,EAAE;MACdA,OAAM,CACHC,IAAI,CAAC,MAAMV,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC,EAC5CU,KAAK,CAAEN,GAAG,IAAKL,OAAO,CAACM,KAAK,CAAC,oBAAoB,EAAED,GAAG,CAAC,CAAC;IAC7D;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}